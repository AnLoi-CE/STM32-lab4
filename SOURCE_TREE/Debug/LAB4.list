
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe4  08002fe4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fe4  08002fe4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fe4  08002fe4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000005c  08003048  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003048  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a225  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecd  00000000  00000000  0002a2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017473  00000000  00000000  0002d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d710  00000000  00000000  00044a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008266d  00000000  00000000  000521ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  000d486c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fa8 	.word	0x08002fa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002fa8 	.word	0x08002fa8

0800014c <isButtonPressed>:
int TimeOutForKeyPress = 500;

int button_flag[N0_OF_BUTTONS] = {0};
int button_long_pressed[N0_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	//button1_flag = 1;
}

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e012      	b.n	80001b2 <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <getKeyInput+0x124>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4944      	ldr	r1, [pc, #272]	; (80002a8 <getKeyInput+0x128>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800019c:	4a43      	ldr	r2, [pc, #268]	; (80002ac <getKeyInput+0x12c>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493f      	ldr	r1, [pc, #252]	; (80002a4 <getKeyInput+0x124>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dde9      	ble.n	800018c <getKeyInput+0xc>
	}
  // Add your key
	KeyReg0[0] = HAL_GPIO_ReadPin(B0_GPIO_Port, B0_Pin);
 80001b8:	2180      	movs	r1, #128	; 0x80
 80001ba:	483d      	ldr	r0, [pc, #244]	; (80002b0 <getKeyInput+0x130>)
 80001bc:	f001 fec8 	bl	8001f50 <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	461a      	mov	r2, r3
 80001c4:	4b39      	ldr	r3, [pc, #228]	; (80002ac <getKeyInput+0x12c>)
 80001c6:	601a      	str	r2, [r3, #0]
	KeyReg0[1] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80001c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001cc:	4838      	ldr	r0, [pc, #224]	; (80002b0 <getKeyInput+0x130>)
 80001ce:	f001 febf 	bl	8001f50 <HAL_GPIO_ReadPin>
 80001d2:	4603      	mov	r3, r0
 80001d4:	461a      	mov	r2, r3
 80001d6:	4b35      	ldr	r3, [pc, #212]	; (80002ac <getKeyInput+0x12c>)
 80001d8:	605a      	str	r2, [r3, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 80001da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001de:	4834      	ldr	r0, [pc, #208]	; (80002b0 <getKeyInput+0x130>)
 80001e0:	f001 feb6 	bl	8001f50 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b30      	ldr	r3, [pc, #192]	; (80002ac <getKeyInput+0x12c>)
 80001ea:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001ec:	2300      	movs	r3, #0
 80001ee:	603b      	str	r3, [r7, #0]
 80001f0:	e050      	b.n	8000294 <getKeyInput+0x114>
		if((KeyReg1[i] == KeyReg0[i]) && (KeyReg2[i] == KeyReg1[i])){
 80001f2:	4a2c      	ldr	r2, [pc, #176]	; (80002a4 <getKeyInput+0x124>)
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	492c      	ldr	r1, [pc, #176]	; (80002ac <getKeyInput+0x12c>)
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000202:	429a      	cmp	r2, r3
 8000204:	d143      	bne.n	800028e <getKeyInput+0x10e>
 8000206:	4a28      	ldr	r2, [pc, #160]	; (80002a8 <getKeyInput+0x128>)
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	4925      	ldr	r1, [pc, #148]	; (80002a4 <getKeyInput+0x124>)
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000216:	429a      	cmp	r2, r3
 8000218:	d139      	bne.n	800028e <getKeyInput+0x10e>
			if(KeyReg2[i] != KeyReg3[i]){
 800021a:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <getKeyInput+0x128>)
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	4924      	ldr	r1, [pc, #144]	; (80002b4 <getKeyInput+0x134>)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022a:	429a      	cmp	r2, r3
 800022c:	d017      	beq.n	800025e <getKeyInput+0xde>
				KeyReg3[i] = KeyReg2[i];
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <getKeyInput+0x128>)
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	491f      	ldr	r1, [pc, #124]	; (80002b4 <getKeyInput+0x134>)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(KeyReg3[i] == PRESSED_STATE){
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x134>)
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d121      	bne.n	800028e <getKeyInput+0x10e>
					TimeOutForKeyPress = 500;
 800024a:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <getKeyInput+0x138>)
 800024c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000250:	601a      	str	r2, [r3, #0]
					button_flag[i] = 1;
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <getKeyInput+0x13c>)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	2101      	movs	r1, #1
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025c:	e017      	b.n	800028e <getKeyInput+0x10e>
				}
			}
			else{
				TimeOutForKeyPress--;
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <getKeyInput+0x138>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	3b01      	subs	r3, #1
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <getKeyInput+0x138>)
 8000266:	6013      	str	r3, [r2, #0]
				if(TimeOutForKeyPress == 0){
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <getKeyInput+0x138>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d10e      	bne.n	800028e <getKeyInput+0x10e>
					TimeOutForKeyPress = 500;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <getKeyInput+0x138>)
 8000272:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000276:	601a      	str	r2, [r3, #0]

					if(KeyReg3[i] == PRESSED_STATE){
 8000278:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <getKeyInput+0x134>)
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d104      	bne.n	800028e <getKeyInput+0x10e>
						button_flag[i] = 1;
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <getKeyInput+0x13c>)
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	2101      	movs	r1, #1
 800028a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	2b02      	cmp	r3, #2
 8000298:	ddab      	ble.n	80001f2 <getKeyInput+0x72>
					}
				}
			}
		}
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000018 	.word	0x20000018
 80002ac:	20000000 	.word	0x20000000
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000024 	.word	0x20000024
 80002b8:	20000030 	.word	0x20000030
 80002bc:	20000078 	.word	0x20000078

080002c0 <fsm_automatic_run>:
int countdown_timer1 = 0;
int countdown_timer2 = 0;
int index_led = 0;
const int MAX_LED = 4;

void fsm_automatic_run(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch(status){
 80002c4:	4b87      	ldr	r3, [pc, #540]	; (80004e4 <fsm_automatic_run+0x224>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	f200 8215 	bhi.w	80006fa <fsm_automatic_run+0x43a>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_run+0x18>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	08000325 	.word	0x08000325
 80002e0:	08000405 	.word	0x08000405
 80002e4:	0800050d 	.word	0x0800050d
 80002e8:	080005ed 	.word	0x080005ed
		case INIT:
			status = AUTO_RED_GREEN;
 80002ec:	4b7d      	ldr	r3, [pc, #500]	; (80004e4 <fsm_automatic_run+0x224>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
			countdown_timer1 = red_time;
 80002f2:	4b7d      	ldr	r3, [pc, #500]	; (80004e8 <fsm_automatic_run+0x228>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a7d      	ldr	r2, [pc, #500]	; (80004ec <fsm_automatic_run+0x22c>)
 80002f8:	6013      	str	r3, [r2, #0]
			countdown_timer2 = green_time;
 80002fa:	4b7d      	ldr	r3, [pc, #500]	; (80004f0 <fsm_automatic_run+0x230>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a7d      	ldr	r2, [pc, #500]	; (80004f4 <fsm_automatic_run+0x234>)
 8000300:	6013      	str	r3, [r2, #0]
			setTimer1(100);					//chuyen trang thai
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f001 f946 	bl	8001594 <setTimer1>
			setTimer2(1);							//quet led
 8000308:	2001      	movs	r0, #1
 800030a:	f001 f957 	bl	80015bc <setTimer2>
			clearTrafficLight();
 800030e:	f001 fab9 	bl	8001884 <clearTrafficLight>
			updateClockBuffer(countdown_timer1, countdown_timer2);
 8000312:	4b76      	ldr	r3, [pc, #472]	; (80004ec <fsm_automatic_run+0x22c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a77      	ldr	r2, [pc, #476]	; (80004f4 <fsm_automatic_run+0x234>)
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fc2b 	bl	8000b78 <updateClockBuffer>
			break;
 8000322:	e1f3      	b.n	800070c <fsm_automatic_run+0x44c>

		case AUTO_RED_GREEN:
			ledRedGreen();
 8000324:	f001 fa66 	bl	80017f4 <ledRedGreen>
			if(timer2_flag == 1){
 8000328:	4b73      	ldr	r3, [pc, #460]	; (80004f8 <fsm_automatic_run+0x238>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d112      	bne.n	8000356 <fsm_automatic_run+0x96>
				setTimer2(25);
 8000330:	2019      	movs	r0, #25
 8000332:	f001 f943 	bl	80015bc <setTimer2>
				update7SEG(index_led);
 8000336:	4b71      	ldr	r3, [pc, #452]	; (80004fc <fsm_automatic_run+0x23c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fdd0 	bl	8000ee0 <update7SEG>
				index_led = (index_led + 1) % MAX_LED;
 8000340:	4b6e      	ldr	r3, [pc, #440]	; (80004fc <fsm_automatic_run+0x23c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	2204      	movs	r2, #4
 8000348:	fb93 f1f2 	sdiv	r1, r3, r2
 800034c:	fb02 f201 	mul.w	r2, r2, r1
 8000350:	1a9b      	subs	r3, r3, r2
 8000352:	4a6a      	ldr	r2, [pc, #424]	; (80004fc <fsm_automatic_run+0x23c>)
 8000354:	6013      	str	r3, [r2, #0]
			}
			if (timer1_flag == 1) {
 8000356:	4b6a      	ldr	r3, [pc, #424]	; (8000500 <fsm_automatic_run+0x240>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d134      	bne.n	80003c8 <fsm_automatic_run+0x108>
				countdown_timer1--;
 800035e:	4b63      	ldr	r3, [pc, #396]	; (80004ec <fsm_automatic_run+0x22c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3b01      	subs	r3, #1
 8000364:	4a61      	ldr	r2, [pc, #388]	; (80004ec <fsm_automatic_run+0x22c>)
 8000366:	6013      	str	r3, [r2, #0]
				countdown_timer2--;
 8000368:	4b62      	ldr	r3, [pc, #392]	; (80004f4 <fsm_automatic_run+0x234>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	4a61      	ldr	r2, [pc, #388]	; (80004f4 <fsm_automatic_run+0x234>)
 8000370:	6013      	str	r3, [r2, #0]
				updateClockBuffer(countdown_timer1, countdown_timer2);
 8000372:	4b5e      	ldr	r3, [pc, #376]	; (80004ec <fsm_automatic_run+0x22c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a5f      	ldr	r2, [pc, #380]	; (80004f4 <fsm_automatic_run+0x234>)
 8000378:	6812      	ldr	r2, [r2, #0]
 800037a:	4611      	mov	r1, r2
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fbfb 	bl	8000b78 <updateClockBuffer>
				setTimer1(100);
 8000382:	2064      	movs	r0, #100	; 0x64
 8000384:	f001 f906 	bl	8001594 <setTimer1>
				if(countdown_timer1 == 0){
 8000388:	4b58      	ldr	r3, [pc, #352]	; (80004ec <fsm_automatic_run+0x22c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d103      	bne.n	8000398 <fsm_automatic_run+0xd8>
					countdown_timer1 = red_time;
 8000390:	4b55      	ldr	r3, [pc, #340]	; (80004e8 <fsm_automatic_run+0x228>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a55      	ldr	r2, [pc, #340]	; (80004ec <fsm_automatic_run+0x22c>)
 8000396:	6013      	str	r3, [r2, #0]
				}
				if(countdown_timer2 == 0){
 8000398:	4b56      	ldr	r3, [pc, #344]	; (80004f4 <fsm_automatic_run+0x234>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d113      	bne.n	80003c8 <fsm_automatic_run+0x108>
					countdown_timer2 = yellow_time;
 80003a0:	4b58      	ldr	r3, [pc, #352]	; (8000504 <fsm_automatic_run+0x244>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a53      	ldr	r2, [pc, #332]	; (80004f4 <fsm_automatic_run+0x234>)
 80003a6:	6013      	str	r3, [r2, #0]
					status = AUTO_RED_YELLOW;
 80003a8:	4b4e      	ldr	r3, [pc, #312]	; (80004e4 <fsm_automatic_run+0x224>)
 80003aa:	2203      	movs	r2, #3
 80003ac:	601a      	str	r2, [r3, #0]
					clearTrafficLight();
 80003ae:	f001 fa69 	bl	8001884 <clearTrafficLight>
					updateClockBuffer(countdown_timer1, countdown_timer2);
 80003b2:	4b4e      	ldr	r3, [pc, #312]	; (80004ec <fsm_automatic_run+0x22c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a4f      	ldr	r2, [pc, #316]	; (80004f4 <fsm_automatic_run+0x234>)
 80003b8:	6812      	ldr	r2, [r2, #0]
 80003ba:	4611      	mov	r1, r2
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fbdb 	bl	8000b78 <updateClockBuffer>
					setTimer1(100);
 80003c2:	2064      	movs	r0, #100	; 0x64
 80003c4:	f001 f8e6 	bl	8001594 <setTimer1>
				}
			}

			if (isButtonPressed(1)) {
 80003c8:	2001      	movs	r0, #1
 80003ca:	f7ff febf 	bl	800014c <isButtonPressed>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d004      	beq.n	80003de <fsm_automatic_run+0x11e>
				status = MAN_RED_GREEN;
 80003d4:	4b43      	ldr	r3, [pc, #268]	; (80004e4 <fsm_automatic_run+0x224>)
 80003d6:	2206      	movs	r2, #6
 80003d8:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80003da:	f001 fa53 	bl	8001884 <clearTrafficLight>
			}
			 if (isButtonPressed(0)) {
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff feb4 	bl	800014c <isButtonPressed>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f000 8189 	beq.w	80006fe <fsm_automatic_run+0x43e>
				status = MODE_2;
 80003ec:	4b3d      	ldr	r3, [pc, #244]	; (80004e4 <fsm_automatic_run+0x224>)
 80003ee:	220a      	movs	r2, #10
 80003f0:	601a      	str	r2, [r3, #0]
				setTimer3(1);
 80003f2:	2001      	movs	r0, #1
 80003f4:	f001 f8f6 	bl	80015e4 <setTimer3>
				temp_time = 1;
 80003f8:	4b43      	ldr	r3, [pc, #268]	; (8000508 <fsm_automatic_run+0x248>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80003fe:	f001 fa41 	bl	8001884 <clearTrafficLight>
			 }
			break;
 8000402:	e17c      	b.n	80006fe <fsm_automatic_run+0x43e>
		case AUTO_RED_YELLOW:
			ledRedYellow();
 8000404:	f001 fa08 	bl	8001818 <ledRedYellow>
			if(timer2_flag == 1){
 8000408:	4b3b      	ldr	r3, [pc, #236]	; (80004f8 <fsm_automatic_run+0x238>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d112      	bne.n	8000436 <fsm_automatic_run+0x176>
				setTimer2(25);
 8000410:	2019      	movs	r0, #25
 8000412:	f001 f8d3 	bl	80015bc <setTimer2>
				update7SEG(index_led);
 8000416:	4b39      	ldr	r3, [pc, #228]	; (80004fc <fsm_automatic_run+0x23c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fd60 	bl	8000ee0 <update7SEG>
				index_led = (index_led + 1) % MAX_LED;
 8000420:	4b36      	ldr	r3, [pc, #216]	; (80004fc <fsm_automatic_run+0x23c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	2204      	movs	r2, #4
 8000428:	fb93 f1f2 	sdiv	r1, r3, r2
 800042c:	fb02 f201 	mul.w	r2, r2, r1
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	4a32      	ldr	r2, [pc, #200]	; (80004fc <fsm_automatic_run+0x23c>)
 8000434:	6013      	str	r3, [r2, #0]
			}
			if (timer1_flag == 1) {
 8000436:	4b32      	ldr	r3, [pc, #200]	; (8000500 <fsm_automatic_run+0x240>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d134      	bne.n	80004a8 <fsm_automatic_run+0x1e8>
				setTimer1(100);
 800043e:	2064      	movs	r0, #100	; 0x64
 8000440:	f001 f8a8 	bl	8001594 <setTimer1>
				countdown_timer1--;
 8000444:	4b29      	ldr	r3, [pc, #164]	; (80004ec <fsm_automatic_run+0x22c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3b01      	subs	r3, #1
 800044a:	4a28      	ldr	r2, [pc, #160]	; (80004ec <fsm_automatic_run+0x22c>)
 800044c:	6013      	str	r3, [r2, #0]
				countdown_timer2--;
 800044e:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <fsm_automatic_run+0x234>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	3b01      	subs	r3, #1
 8000454:	4a27      	ldr	r2, [pc, #156]	; (80004f4 <fsm_automatic_run+0x234>)
 8000456:	6013      	str	r3, [r2, #0]
				updateClockBuffer(countdown_timer1, countdown_timer2);
 8000458:	4b24      	ldr	r3, [pc, #144]	; (80004ec <fsm_automatic_run+0x22c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a25      	ldr	r2, [pc, #148]	; (80004f4 <fsm_automatic_run+0x234>)
 800045e:	6812      	ldr	r2, [r2, #0]
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fb88 	bl	8000b78 <updateClockBuffer>
				if(countdown_timer1 == 0){
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <fsm_automatic_run+0x22c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d103      	bne.n	8000478 <fsm_automatic_run+0x1b8>
					countdown_timer1 = red_time;
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <fsm_automatic_run+0x228>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <fsm_automatic_run+0x22c>)
 8000476:	6013      	str	r3, [r2, #0]
				}
				if(countdown_timer2 == 0){
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <fsm_automatic_run+0x234>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d113      	bne.n	80004a8 <fsm_automatic_run+0x1e8>
					countdown_timer2 = green_time;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <fsm_automatic_run+0x230>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <fsm_automatic_run+0x234>)
 8000486:	6013      	str	r3, [r2, #0]
					status = AUTO_GREEN_RED;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <fsm_automatic_run+0x224>)
 800048a:	2204      	movs	r2, #4
 800048c:	601a      	str	r2, [r3, #0]
					clearTrafficLight();
 800048e:	f001 f9f9 	bl	8001884 <clearTrafficLight>
					setTimer1(100);
 8000492:	2064      	movs	r0, #100	; 0x64
 8000494:	f001 f87e 	bl	8001594 <setTimer1>
					updateClockBuffer(countdown_timer2, countdown_timer1);
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <fsm_automatic_run+0x234>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a13      	ldr	r2, [pc, #76]	; (80004ec <fsm_automatic_run+0x22c>)
 800049e:	6812      	ldr	r2, [r2, #0]
 80004a0:	4611      	mov	r1, r2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fb68 	bl	8000b78 <updateClockBuffer>
				}
			}

			if (isButtonPressed(1) == 1) {
 80004a8:	2001      	movs	r0, #1
 80004aa:	f7ff fe4f 	bl	800014c <isButtonPressed>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d104      	bne.n	80004be <fsm_automatic_run+0x1fe>
				status = MAN_RED_GREEN;
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <fsm_automatic_run+0x224>)
 80004b6:	2206      	movs	r2, #6
 80004b8:	601a      	str	r2, [r3, #0]
//				setTimer1(countdown_timer1 * 1000);
				clearTrafficLight();
 80004ba:	f001 f9e3 	bl	8001884 <clearTrafficLight>
			}
			 if (isButtonPressed(0)) {
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff fe44 	bl	800014c <isButtonPressed>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	f000 811b 	beq.w	8000702 <fsm_automatic_run+0x442>
				status = MODE_2;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <fsm_automatic_run+0x224>)
 80004ce:	220a      	movs	r2, #10
 80004d0:	601a      	str	r2, [r3, #0]
				setTimer3(1);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f001 f886 	bl	80015e4 <setTimer3>
				temp_time = 1;
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <fsm_automatic_run+0x248>)
 80004da:	2201      	movs	r2, #1
 80004dc:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80004de:	f001 f9d1 	bl	8001884 <clearTrafficLight>
			 }
			break;
 80004e2:	e10e      	b.n	8000702 <fsm_automatic_run+0x442>
 80004e4:	2000003c 	.word	0x2000003c
 80004e8:	20000040 	.word	0x20000040
 80004ec:	20000084 	.word	0x20000084
 80004f0:	20000044 	.word	0x20000044
 80004f4:	20000088 	.word	0x20000088
 80004f8:	200000a0 	.word	0x200000a0
 80004fc:	2000008c 	.word	0x2000008c
 8000500:	20000098 	.word	0x20000098
 8000504:	20000048 	.word	0x20000048
 8000508:	2000004c 	.word	0x2000004c
		case AUTO_GREEN_RED:
			ledGreenRed();
 800050c:	f001 f996 	bl	800183c <ledGreenRed>
			if(timer2_flag == 1){
 8000510:	4b7f      	ldr	r3, [pc, #508]	; (8000710 <fsm_automatic_run+0x450>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d112      	bne.n	800053e <fsm_automatic_run+0x27e>
				setTimer2(25);
 8000518:	2019      	movs	r0, #25
 800051a:	f001 f84f 	bl	80015bc <setTimer2>
				update7SEG(index_led);
 800051e:	4b7d      	ldr	r3, [pc, #500]	; (8000714 <fsm_automatic_run+0x454>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fcdc 	bl	8000ee0 <update7SEG>
				index_led = (index_led + 1) % MAX_LED;
 8000528:	4b7a      	ldr	r3, [pc, #488]	; (8000714 <fsm_automatic_run+0x454>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	2204      	movs	r2, #4
 8000530:	fb93 f1f2 	sdiv	r1, r3, r2
 8000534:	fb02 f201 	mul.w	r2, r2, r1
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	4a76      	ldr	r2, [pc, #472]	; (8000714 <fsm_automatic_run+0x454>)
 800053c:	6013      	str	r3, [r2, #0]
			}
			if (timer1_flag == 1) {
 800053e:	4b76      	ldr	r3, [pc, #472]	; (8000718 <fsm_automatic_run+0x458>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d134      	bne.n	80005b0 <fsm_automatic_run+0x2f0>
				setTimer1(100);
 8000546:	2064      	movs	r0, #100	; 0x64
 8000548:	f001 f824 	bl	8001594 <setTimer1>
				countdown_timer1--;
 800054c:	4b73      	ldr	r3, [pc, #460]	; (800071c <fsm_automatic_run+0x45c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a72      	ldr	r2, [pc, #456]	; (800071c <fsm_automatic_run+0x45c>)
 8000554:	6013      	str	r3, [r2, #0]
				countdown_timer2--;
 8000556:	4b72      	ldr	r3, [pc, #456]	; (8000720 <fsm_automatic_run+0x460>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	4a70      	ldr	r2, [pc, #448]	; (8000720 <fsm_automatic_run+0x460>)
 800055e:	6013      	str	r3, [r2, #0]
				updateClockBuffer(countdown_timer2, countdown_timer1);
 8000560:	4b6f      	ldr	r3, [pc, #444]	; (8000720 <fsm_automatic_run+0x460>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a6d      	ldr	r2, [pc, #436]	; (800071c <fsm_automatic_run+0x45c>)
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	4611      	mov	r1, r2
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fb04 	bl	8000b78 <updateClockBuffer>
				if(countdown_timer1 == 0){
 8000570:	4b6a      	ldr	r3, [pc, #424]	; (800071c <fsm_automatic_run+0x45c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d103      	bne.n	8000580 <fsm_automatic_run+0x2c0>
					countdown_timer1 = red_time;
 8000578:	4b6a      	ldr	r3, [pc, #424]	; (8000724 <fsm_automatic_run+0x464>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a67      	ldr	r2, [pc, #412]	; (800071c <fsm_automatic_run+0x45c>)
 800057e:	6013      	str	r3, [r2, #0]
				}
				if(countdown_timer2 == 0){
 8000580:	4b67      	ldr	r3, [pc, #412]	; (8000720 <fsm_automatic_run+0x460>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d113      	bne.n	80005b0 <fsm_automatic_run+0x2f0>
					countdown_timer2 = yellow_time;
 8000588:	4b67      	ldr	r3, [pc, #412]	; (8000728 <fsm_automatic_run+0x468>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a64      	ldr	r2, [pc, #400]	; (8000720 <fsm_automatic_run+0x460>)
 800058e:	6013      	str	r3, [r2, #0]
					status = AUTO_YELLOW_RED;
 8000590:	4b66      	ldr	r3, [pc, #408]	; (800072c <fsm_automatic_run+0x46c>)
 8000592:	2205      	movs	r2, #5
 8000594:	601a      	str	r2, [r3, #0]
					updateClockBuffer(countdown_timer2, countdown_timer1);
 8000596:	4b62      	ldr	r3, [pc, #392]	; (8000720 <fsm_automatic_run+0x460>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a60      	ldr	r2, [pc, #384]	; (800071c <fsm_automatic_run+0x45c>)
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fae9 	bl	8000b78 <updateClockBuffer>
					clearTrafficLight();
 80005a6:	f001 f96d 	bl	8001884 <clearTrafficLight>
					setTimer1(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f000 fff2 	bl	8001594 <setTimer1>
				}
			}

			if (isButtonPressed(1) == 1) {
 80005b0:	2001      	movs	r0, #1
 80005b2:	f7ff fdcb 	bl	800014c <isButtonPressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d104      	bne.n	80005c6 <fsm_automatic_run+0x306>
				status = MAN_RED_GREEN;
 80005bc:	4b5b      	ldr	r3, [pc, #364]	; (800072c <fsm_automatic_run+0x46c>)
 80005be:	2206      	movs	r2, #6
 80005c0:	601a      	str	r2, [r3, #0]
//				setTimer1(countdown_timer1 * 1000);
				clearTrafficLight();
 80005c2:	f001 f95f 	bl	8001884 <clearTrafficLight>
			}
			 if (isButtonPressed(0)) {
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff fdc0 	bl	800014c <isButtonPressed>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	f000 8099 	beq.w	8000706 <fsm_automatic_run+0x446>
				status = MODE_2;
 80005d4:	4b55      	ldr	r3, [pc, #340]	; (800072c <fsm_automatic_run+0x46c>)
 80005d6:	220a      	movs	r2, #10
 80005d8:	601a      	str	r2, [r3, #0]
				setTimer3(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f001 f802 	bl	80015e4 <setTimer3>
				temp_time = 1;
 80005e0:	4b53      	ldr	r3, [pc, #332]	; (8000730 <fsm_automatic_run+0x470>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80005e6:	f001 f94d 	bl	8001884 <clearTrafficLight>
			 }
			break;
 80005ea:	e08c      	b.n	8000706 <fsm_automatic_run+0x446>
		case AUTO_YELLOW_RED:
			ledYellowRed();
 80005ec:	f001 f938 	bl	8001860 <ledYellowRed>
			if(timer2_flag == 1){
 80005f0:	4b47      	ldr	r3, [pc, #284]	; (8000710 <fsm_automatic_run+0x450>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d112      	bne.n	800061e <fsm_automatic_run+0x35e>
				setTimer2(25);
 80005f8:	2019      	movs	r0, #25
 80005fa:	f000 ffdf 	bl	80015bc <setTimer2>
				update7SEG(index_led);
 80005fe:	4b45      	ldr	r3, [pc, #276]	; (8000714 <fsm_automatic_run+0x454>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fc6c 	bl	8000ee0 <update7SEG>
				index_led = (index_led + 1) % MAX_LED;
 8000608:	4b42      	ldr	r3, [pc, #264]	; (8000714 <fsm_automatic_run+0x454>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	2204      	movs	r2, #4
 8000610:	fb93 f1f2 	sdiv	r1, r3, r2
 8000614:	fb02 f201 	mul.w	r2, r2, r1
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4a3e      	ldr	r2, [pc, #248]	; (8000714 <fsm_automatic_run+0x454>)
 800061c:	6013      	str	r3, [r2, #0]
			}
			if (timer1_flag == 1) {
 800061e:	4b3e      	ldr	r3, [pc, #248]	; (8000718 <fsm_automatic_run+0x458>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d14c      	bne.n	80006c0 <fsm_automatic_run+0x400>
				setTimer1(100);
 8000626:	2064      	movs	r0, #100	; 0x64
 8000628:	f000 ffb4 	bl	8001594 <setTimer1>
				countdown_timer1--;
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <fsm_automatic_run+0x45c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	4a3a      	ldr	r2, [pc, #232]	; (800071c <fsm_automatic_run+0x45c>)
 8000634:	6013      	str	r3, [r2, #0]
				countdown_timer2--;
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <fsm_automatic_run+0x460>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a38      	ldr	r2, [pc, #224]	; (8000720 <fsm_automatic_run+0x460>)
 800063e:	6013      	str	r3, [r2, #0]
				updateClockBuffer(countdown_timer2, countdown_timer1);
 8000640:	4b37      	ldr	r3, [pc, #220]	; (8000720 <fsm_automatic_run+0x460>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a35      	ldr	r2, [pc, #212]	; (800071c <fsm_automatic_run+0x45c>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	4611      	mov	r1, r2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa94 	bl	8000b78 <updateClockBuffer>
				if(countdown_timer2 <= 0 || countdown_timer1 <= 0){
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <fsm_automatic_run+0x460>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	dd03      	ble.n	8000660 <fsm_automatic_run+0x3a0>
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <fsm_automatic_run+0x45c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	dc0f      	bgt.n	8000680 <fsm_automatic_run+0x3c0>
					countdown_timer1 = red_time;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <fsm_automatic_run+0x464>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2d      	ldr	r2, [pc, #180]	; (800071c <fsm_automatic_run+0x45c>)
 8000666:	6013      	str	r3, [r2, #0]
					countdown_timer2 = green_time;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <fsm_automatic_run+0x474>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a2c      	ldr	r2, [pc, #176]	; (8000720 <fsm_automatic_run+0x460>)
 800066e:	6013      	str	r3, [r2, #0]
					status = AUTO_RED_GREEN;
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <fsm_automatic_run+0x46c>)
 8000672:	2202      	movs	r2, #2
 8000674:	601a      	str	r2, [r3, #0]
					clearTrafficLight();
 8000676:	f001 f905 	bl	8001884 <clearTrafficLight>
					setTimer1(100);
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f000 ff8a 	bl	8001594 <setTimer1>
				}
				if( countdown_timer1 == 0){
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <fsm_automatic_run+0x45c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <fsm_automatic_run+0x3d0>
					countdown_timer1 = red_time;
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <fsm_automatic_run+0x464>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a23      	ldr	r2, [pc, #140]	; (800071c <fsm_automatic_run+0x45c>)
 800068e:	6013      	str	r3, [r2, #0]
				}
				if(countdown_timer2 == 0){
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <fsm_automatic_run+0x460>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d113      	bne.n	80006c0 <fsm_automatic_run+0x400>
					countdown_timer2 = green_time;
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <fsm_automatic_run+0x474>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <fsm_automatic_run+0x460>)
 800069e:	6013      	str	r3, [r2, #0]
					status = AUTO_RED_GREEN;
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <fsm_automatic_run+0x46c>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	601a      	str	r2, [r3, #0]
					clearTrafficLight();
 80006a6:	f001 f8ed 	bl	8001884 <clearTrafficLight>
					updateClockBuffer(countdown_timer1, countdown_timer2);
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <fsm_automatic_run+0x45c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <fsm_automatic_run+0x460>)
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fa5f 	bl	8000b78 <updateClockBuffer>
					setTimer1(100);
 80006ba:	2064      	movs	r0, #100	; 0x64
 80006bc:	f000 ff6a 	bl	8001594 <setTimer1>
				}
			}


			if (isButtonPressed(1) == 1) {
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff fd43 	bl	800014c <isButtonPressed>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d104      	bne.n	80006d6 <fsm_automatic_run+0x416>
				status = MAN_RED_GREEN;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <fsm_automatic_run+0x46c>)
 80006ce:	2206      	movs	r2, #6
 80006d0:	601a      	str	r2, [r3, #0]
//				setTimer1( countdown_timer1 * 1000);
				clearTrafficLight();
 80006d2:	f001 f8d7 	bl	8001884 <clearTrafficLight>
			}
			 if (isButtonPressed(0)) {
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff fd38 	bl	800014c <isButtonPressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d013      	beq.n	800070a <fsm_automatic_run+0x44a>
				status = MODE_2;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <fsm_automatic_run+0x46c>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	601a      	str	r2, [r3, #0]
				setTimer3(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 ff7b 	bl	80015e4 <setTimer3>
				temp_time = 1;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <fsm_automatic_run+0x470>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80006f4:	f001 f8c6 	bl	8001884 <clearTrafficLight>
			 }
			break;
 80006f8:	e007      	b.n	800070a <fsm_automatic_run+0x44a>
		default:
			break;
 80006fa:	bf00      	nop
 80006fc:	e006      	b.n	800070c <fsm_automatic_run+0x44c>
			break;
 80006fe:	bf00      	nop
 8000700:	e004      	b.n	800070c <fsm_automatic_run+0x44c>
			break;
 8000702:	bf00      	nop
 8000704:	e002      	b.n	800070c <fsm_automatic_run+0x44c>
			break;
 8000706:	bf00      	nop
 8000708:	e000      	b.n	800070c <fsm_automatic_run+0x44c>
			break;
 800070a:	bf00      	nop
	}
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000a0 	.word	0x200000a0
 8000714:	2000008c 	.word	0x2000008c
 8000718:	20000098 	.word	0x20000098
 800071c:	20000084 	.word	0x20000084
 8000720:	20000088 	.word	0x20000088
 8000724:	20000040 	.word	0x20000040
 8000728:	20000048 	.word	0x20000048
 800072c:	2000003c 	.word	0x2000003c
 8000730:	2000004c 	.word	0x2000004c
 8000734:	20000044 	.word	0x20000044

08000738 <fsm_manual_run>:
//int countdown_timer1 = 0;
//int countdown_timer2 = 0;
//int index_led = 0;
//const int MAX_LED = 4;

void fsm_manual_run() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    switch (status) {
 800073c:	4b56      	ldr	r3, [pc, #344]	; (8000898 <fsm_manual_run+0x160>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3b06      	subs	r3, #6
 8000742:	2b03      	cmp	r3, #3
 8000744:	f200 809c 	bhi.w	8000880 <fsm_manual_run+0x148>
 8000748:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <fsm_manual_run+0x18>)
 800074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074e:	bf00      	nop
 8000750:	08000761 	.word	0x08000761
 8000754:	080007a9 	.word	0x080007a9
 8000758:	080007f1 	.word	0x080007f1
 800075c:	08000839 	.word	0x08000839
        case MAN_RED_GREEN:
            ledRedGreen();
 8000760:	f001 f848 	bl	80017f4 <ledRedGreen>

            if (isButtonPressed(0) == 1) {
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fcf1 	bl	800014c <isButtonPressed>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <fsm_manual_run+0x42>
                status = MODE_2;
 8000770:	4b49      	ldr	r3, [pc, #292]	; (8000898 <fsm_manual_run+0x160>)
 8000772:	220a      	movs	r2, #10
 8000774:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 8000776:	f001 f885 	bl	8001884 <clearTrafficLight>
            }
            if (isButtonPressed(1) == 1) {
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fce6 	bl	800014c <isButtonPressed>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d104      	bne.n	8000790 <fsm_manual_run+0x58>
                status = MAN_RED_YELLOW;
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <fsm_manual_run+0x160>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 800078c:	f001 f87a 	bl	8001884 <clearTrafficLight>
            }
            if (isButtonPressed(2) == 1) {
 8000790:	2002      	movs	r0, #2
 8000792:	f7ff fcdb 	bl	800014c <isButtonPressed>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d173      	bne.n	8000884 <fsm_manual_run+0x14c>
                status = AUTO_RED_GREEN;
 800079c:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <fsm_manual_run+0x160>)
 800079e:	2202      	movs	r2, #2
 80007a0:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 80007a2:	f001 f86f 	bl	8001884 <clearTrafficLight>
            }

            break;
 80007a6:	e06d      	b.n	8000884 <fsm_manual_run+0x14c>

        case MAN_RED_YELLOW:
            ledRedYellow();
 80007a8:	f001 f836 	bl	8001818 <ledRedYellow>

            if (isButtonPressed(0) == 1) {
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fccd 	bl	800014c <isButtonPressed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d104      	bne.n	80007c2 <fsm_manual_run+0x8a>
                status = MODE_2;
 80007b8:	4b37      	ldr	r3, [pc, #220]	; (8000898 <fsm_manual_run+0x160>)
 80007ba:	220a      	movs	r2, #10
 80007bc:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 80007be:	f001 f861 	bl	8001884 <clearTrafficLight>
            }
            if (isButtonPressed(1) == 1) {
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fcc2 	bl	800014c <isButtonPressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d104      	bne.n	80007d8 <fsm_manual_run+0xa0>
                status = MAN_GREEN_RED;
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <fsm_manual_run+0x160>)
 80007d0:	2208      	movs	r2, #8
 80007d2:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 80007d4:	f001 f856 	bl	8001884 <clearTrafficLight>
            }
            if (isButtonPressed(2) == 1) {
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fcb7 	bl	800014c <isButtonPressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d151      	bne.n	8000888 <fsm_manual_run+0x150>
                status = AUTO_RED_YELLOW;
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <fsm_manual_run+0x160>)
 80007e6:	2203      	movs	r2, #3
 80007e8:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 80007ea:	f001 f84b 	bl	8001884 <clearTrafficLight>
            }
            break;
 80007ee:	e04b      	b.n	8000888 <fsm_manual_run+0x150>

        case MAN_GREEN_RED:
            ledGreenRed();
 80007f0:	f001 f824 	bl	800183c <ledGreenRed>

            if (isButtonPressed(0) == 1) {
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fca9 	bl	800014c <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <fsm_manual_run+0xd2>
                status = MODE_2;
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <fsm_manual_run+0x160>)
 8000802:	220a      	movs	r2, #10
 8000804:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 8000806:	f001 f83d 	bl	8001884 <clearTrafficLight>
            }
            if (isButtonPressed(1) == 1) {
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fc9e 	bl	800014c <isButtonPressed>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d104      	bne.n	8000820 <fsm_manual_run+0xe8>
                status = MAN_YELLOW_RED;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <fsm_manual_run+0x160>)
 8000818:	2209      	movs	r2, #9
 800081a:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 800081c:	f001 f832 	bl	8001884 <clearTrafficLight>
            }
            if (isButtonPressed(2) == 1) {
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fc93 	bl	800014c <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d12f      	bne.n	800088c <fsm_manual_run+0x154>
                status = AUTO_GREEN_RED;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <fsm_manual_run+0x160>)
 800082e:	2204      	movs	r2, #4
 8000830:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 8000832:	f001 f827 	bl	8001884 <clearTrafficLight>
            }
            break;
 8000836:	e029      	b.n	800088c <fsm_manual_run+0x154>

        case MAN_YELLOW_RED:
            ledYellowRed();
 8000838:	f001 f812 	bl	8001860 <ledYellowRed>

            if (isButtonPressed(0) == 1) {
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fc85 	bl	800014c <isButtonPressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d104      	bne.n	8000852 <fsm_manual_run+0x11a>
                status = MODE_2;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <fsm_manual_run+0x160>)
 800084a:	220a      	movs	r2, #10
 800084c:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 800084e:	f001 f819 	bl	8001884 <clearTrafficLight>
            }
            if (isButtonPressed(1) == 1) {
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fc7a 	bl	800014c <isButtonPressed>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d104      	bne.n	8000868 <fsm_manual_run+0x130>
                status = MAN_RED_GREEN;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <fsm_manual_run+0x160>)
 8000860:	2206      	movs	r2, #6
 8000862:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 8000864:	f001 f80e 	bl	8001884 <clearTrafficLight>
            }
            if (isButtonPressed(2) == 1) {
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff fc6f 	bl	800014c <isButtonPressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d10d      	bne.n	8000890 <fsm_manual_run+0x158>
                status = AUTO_YELLOW_RED;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <fsm_manual_run+0x160>)
 8000876:	2205      	movs	r2, #5
 8000878:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 800087a:	f001 f803 	bl	8001884 <clearTrafficLight>
            }
            break;
 800087e:	e007      	b.n	8000890 <fsm_manual_run+0x158>

        default:
            break;
 8000880:	bf00      	nop
 8000882:	e006      	b.n	8000892 <fsm_manual_run+0x15a>
            break;
 8000884:	bf00      	nop
 8000886:	e004      	b.n	8000892 <fsm_manual_run+0x15a>
            break;
 8000888:	bf00      	nop
 800088a:	e002      	b.n	8000892 <fsm_manual_run+0x15a>
            break;
 800088c:	bf00      	nop
 800088e:	e000      	b.n	8000892 <fsm_manual_run+0x15a>
            break;
 8000890:	bf00      	nop
    }
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000003c 	.word	0x2000003c

0800089c <fsm_setting>:
int mode3 = 3;
int mode4 = 4;
int num = 0;
const int MAX = 4;

void fsm_setting() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	switch(status) {
 80008a0:	4ba9      	ldr	r3, [pc, #676]	; (8000b48 <fsm_setting+0x2ac>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b0c      	cmp	r3, #12
 80008a6:	f000 80df 	beq.w	8000a68 <fsm_setting+0x1cc>
 80008aa:	2b0c      	cmp	r3, #12
 80008ac:	f300 8143 	bgt.w	8000b36 <fsm_setting+0x29a>
 80008b0:	2b0a      	cmp	r3, #10
 80008b2:	d002      	beq.n	80008ba <fsm_setting+0x1e>
 80008b4:	2b0b      	cmp	r3, #11
 80008b6:	d06c      	beq.n	8000992 <fsm_setting+0xf6>
	                clearTrafficLight();
	            }
	            break;

	        default:
	            break;
 80008b8:	e13d      	b.n	8000b36 <fsm_setting+0x29a>
			updateClockBuffer(2, temp_time);
 80008ba:	4ba4      	ldr	r3, [pc, #656]	; (8000b4c <fsm_setting+0x2b0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	2002      	movs	r0, #2
 80008c2:	f000 f959 	bl	8000b78 <updateClockBuffer>
			if(timer2_flag == 1){
 80008c6:	4ba2      	ldr	r3, [pc, #648]	; (8000b50 <fsm_setting+0x2b4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d113      	bne.n	80008f6 <fsm_setting+0x5a>
				setTimer2(25);
 80008ce:	2019      	movs	r0, #25
 80008d0:	f000 fe74 	bl	80015bc <setTimer2>
				update7SEG(num);
 80008d4:	4b9f      	ldr	r3, [pc, #636]	; (8000b54 <fsm_setting+0x2b8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fb01 	bl	8000ee0 <update7SEG>
				num++;
 80008de:	4b9d      	ldr	r3, [pc, #628]	; (8000b54 <fsm_setting+0x2b8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a9b      	ldr	r2, [pc, #620]	; (8000b54 <fsm_setting+0x2b8>)
 80008e6:	6013      	str	r3, [r2, #0]
				if(num>3){
 80008e8:	4b9a      	ldr	r3, [pc, #616]	; (8000b54 <fsm_setting+0x2b8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	dd02      	ble.n	80008f6 <fsm_setting+0x5a>
					num = 0;
 80008f0:	4b98      	ldr	r3, [pc, #608]	; (8000b54 <fsm_setting+0x2b8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 80008f6:	4b98      	ldr	r3, [pc, #608]	; (8000b58 <fsm_setting+0x2bc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d104      	bne.n	8000908 <fsm_setting+0x6c>
					toggleRedLED();
 80008fe:	f000 ffe7 	bl	80018d0 <toggleRedLED>
					setTimer3(50);
 8000902:	2032      	movs	r0, #50	; 0x32
 8000904:	f000 fe6e 	bl	80015e4 <setTimer3>
	            if (isButtonPressed(0) == 1) {
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fc1f 	bl	800014c <isButtonPressed>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d107      	bne.n	8000924 <fsm_setting+0x88>
	                status = MODE_3;
 8000914:	4b8c      	ldr	r3, [pc, #560]	; (8000b48 <fsm_setting+0x2ac>)
 8000916:	220b      	movs	r2, #11
 8000918:	601a      	str	r2, [r3, #0]
	                temp_time = 1;
 800091a:	4b8c      	ldr	r3, [pc, #560]	; (8000b4c <fsm_setting+0x2b0>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 8000920:	f000 ffb0 	bl	8001884 <clearTrafficLight>
	            if (isButtonPressed(1) == 1) {
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fc11 	bl	800014c <isButtonPressed>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d10b      	bne.n	8000948 <fsm_setting+0xac>
	               temp_time++;
 8000930:	4b86      	ldr	r3, [pc, #536]	; (8000b4c <fsm_setting+0x2b0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a85      	ldr	r2, [pc, #532]	; (8000b4c <fsm_setting+0x2b0>)
 8000938:	6013      	str	r3, [r2, #0]
	                if (temp_time > 99) {
 800093a:	4b84      	ldr	r3, [pc, #528]	; (8000b4c <fsm_setting+0x2b0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b63      	cmp	r3, #99	; 0x63
 8000940:	dd02      	ble.n	8000948 <fsm_setting+0xac>
	                	temp_time = 1;
 8000942:	4b82      	ldr	r3, [pc, #520]	; (8000b4c <fsm_setting+0x2b0>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
	            if (isButtonPressed(2) == 1) {
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff fbff 	bl	800014c <isButtonPressed>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	f040 80f2 	bne.w	8000b3a <fsm_setting+0x29e>
	                red_time = temp_time;
 8000956:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <fsm_setting+0x2b0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a80      	ldr	r2, [pc, #512]	; (8000b5c <fsm_setting+0x2c0>)
 800095c:	6013      	str	r3, [r2, #0]
	                green_time = (3 * red_time /5);
 800095e:	4b7f      	ldr	r3, [pc, #508]	; (8000b5c <fsm_setting+0x2c0>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	4a7d      	ldr	r2, [pc, #500]	; (8000b60 <fsm_setting+0x2c4>)
 800096a:	fb82 1203 	smull	r1, r2, r2, r3
 800096e:	1052      	asrs	r2, r2, #1
 8000970:	17db      	asrs	r3, r3, #31
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	4a7b      	ldr	r2, [pc, #492]	; (8000b64 <fsm_setting+0x2c8>)
 8000976:	6013      	str	r3, [r2, #0]
	                yellow_time = red_time - green_time;
 8000978:	4b78      	ldr	r3, [pc, #480]	; (8000b5c <fsm_setting+0x2c0>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b79      	ldr	r3, [pc, #484]	; (8000b64 <fsm_setting+0x2c8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	4a79      	ldr	r2, [pc, #484]	; (8000b68 <fsm_setting+0x2cc>)
 8000984:	6013      	str	r3, [r2, #0]
	                status = INIT;
 8000986:	4b70      	ldr	r3, [pc, #448]	; (8000b48 <fsm_setting+0x2ac>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 800098c:	f000 ff7a 	bl	8001884 <clearTrafficLight>
	            break;
 8000990:	e0d3      	b.n	8000b3a <fsm_setting+0x29e>
	        	updateClockBuffer(mode3, temp_time);
 8000992:	4b76      	ldr	r3, [pc, #472]	; (8000b6c <fsm_setting+0x2d0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a6d      	ldr	r2, [pc, #436]	; (8000b4c <fsm_setting+0x2b0>)
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f8eb 	bl	8000b78 <updateClockBuffer>
	        	if(timer3_flag == 1){
 80009a2:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <fsm_setting+0x2bc>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d104      	bne.n	80009b4 <fsm_setting+0x118>
	        		toggleYellowLED();
 80009aa:	f000 ffa1 	bl	80018f0 <toggleYellowLED>
	        		setTimer3(50);
 80009ae:	2032      	movs	r0, #50	; 0x32
 80009b0:	f000 fe18 	bl	80015e4 <setTimer3>
				if(timer2_flag == 1){
 80009b4:	4b66      	ldr	r3, [pc, #408]	; (8000b50 <fsm_setting+0x2b4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d112      	bne.n	80009e2 <fsm_setting+0x146>
					setTimer2(25);
 80009bc:	2019      	movs	r0, #25
 80009be:	f000 fdfd 	bl	80015bc <setTimer2>
					update7SEG(num);
 80009c2:	4b64      	ldr	r3, [pc, #400]	; (8000b54 <fsm_setting+0x2b8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fa8a 	bl	8000ee0 <update7SEG>
					num = (num + 1) % MAX;
 80009cc:	4b61      	ldr	r3, [pc, #388]	; (8000b54 <fsm_setting+0x2b8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	2204      	movs	r2, #4
 80009d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80009d8:	fb02 f201 	mul.w	r2, r2, r1
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	4a5d      	ldr	r2, [pc, #372]	; (8000b54 <fsm_setting+0x2b8>)
 80009e0:	6013      	str	r3, [r2, #0]
	            if (isButtonPressed(0) == 1) {
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fbb2 	bl	800014c <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d107      	bne.n	80009fe <fsm_setting+0x162>
	                status = MODE_4;
 80009ee:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <fsm_setting+0x2ac>)
 80009f0:	220c      	movs	r2, #12
 80009f2:	601a      	str	r2, [r3, #0]
	                temp_time = 1;
 80009f4:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <fsm_setting+0x2b0>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 80009fa:	f000 ff43 	bl	8001884 <clearTrafficLight>
	            if (isButtonPressed(1) == 1) {
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fba4 	bl	800014c <isButtonPressed>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10b      	bne.n	8000a22 <fsm_setting+0x186>
	                temp_time++;
 8000a0a:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <fsm_setting+0x2b0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <fsm_setting+0x2b0>)
 8000a12:	6013      	str	r3, [r2, #0]
	                if (temp_time > 99){
 8000a14:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <fsm_setting+0x2b0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b63      	cmp	r3, #99	; 0x63
 8000a1a:	dd02      	ble.n	8000a22 <fsm_setting+0x186>
	                	temp_time = 1;
 8000a1c:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <fsm_setting+0x2b0>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
	            if (isButtonPressed(2) == 1) {
 8000a22:	2002      	movs	r0, #2
 8000a24:	f7ff fb92 	bl	800014c <isButtonPressed>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	f040 8087 	bne.w	8000b3e <fsm_setting+0x2a2>
	                yellow_time = temp_time;
 8000a30:	4b46      	ldr	r3, [pc, #280]	; (8000b4c <fsm_setting+0x2b0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a4c      	ldr	r2, [pc, #304]	; (8000b68 <fsm_setting+0x2cc>)
 8000a36:	6013      	str	r3, [r2, #0]
	                green_time = (3 * yellow_time /2);
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <fsm_setting+0x2cc>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	0fda      	lsrs	r2, r3, #31
 8000a44:	4413      	add	r3, r2
 8000a46:	105b      	asrs	r3, r3, #1
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <fsm_setting+0x2c8>)
 8000a4c:	601a      	str	r2, [r3, #0]
	                red_time = green_time + yellow_time;
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <fsm_setting+0x2c8>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <fsm_setting+0x2cc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a40      	ldr	r2, [pc, #256]	; (8000b5c <fsm_setting+0x2c0>)
 8000a5a:	6013      	str	r3, [r2, #0]
	                status = AUTO_RED_GREEN;
 8000a5c:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <fsm_setting+0x2ac>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 8000a62:	f000 ff0f 	bl	8001884 <clearTrafficLight>
	            break;
 8000a66:	e06a      	b.n	8000b3e <fsm_setting+0x2a2>
	        	updateClockBuffer(mode4, temp_time);
 8000a68:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <fsm_setting+0x2d4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <fsm_setting+0x2b0>)
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f880 	bl	8000b78 <updateClockBuffer>
	        	if(timer3_flag == 1){
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <fsm_setting+0x2bc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <fsm_setting+0x1ee>
	            toggleGreenLED();
 8000a80:	f000 ff46 	bl	8001910 <toggleGreenLED>
	            setTimer3(50);
 8000a84:	2032      	movs	r0, #50	; 0x32
 8000a86:	f000 fdad 	bl	80015e4 <setTimer3>
				if(timer2_flag == 1){
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <fsm_setting+0x2b4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d112      	bne.n	8000ab8 <fsm_setting+0x21c>
					setTimer2(25);
 8000a92:	2019      	movs	r0, #25
 8000a94:	f000 fd92 	bl	80015bc <setTimer2>
					update7SEG(num);
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <fsm_setting+0x2b8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fa1f 	bl	8000ee0 <update7SEG>
					num = (num + 1) % MAX;
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <fsm_setting+0x2b8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	fb93 f1f2 	sdiv	r1, r3, r2
 8000aae:	fb02 f201 	mul.w	r2, r2, r1
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <fsm_setting+0x2b8>)
 8000ab6:	6013      	str	r3, [r2, #0]
	            if (isButtonPressed(0) == 1) {
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff fb47 	bl	800014c <isButtonPressed>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d105      	bne.n	8000ad0 <fsm_setting+0x234>
	                status = MODE_2;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <fsm_setting+0x2ac>)
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	601a      	str	r2, [r3, #0]
	                temp_time = 1;
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <fsm_setting+0x2b0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
	            if (isButtonPressed(1) == 1) {
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fb3b 	bl	800014c <isButtonPressed>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10b      	bne.n	8000af4 <fsm_setting+0x258>
	                temp_time++;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <fsm_setting+0x2b0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <fsm_setting+0x2b0>)
 8000ae4:	6013      	str	r3, [r2, #0]
	                if (temp_time > 99) {
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <fsm_setting+0x2b0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b63      	cmp	r3, #99	; 0x63
 8000aec:	dd02      	ble.n	8000af4 <fsm_setting+0x258>
	                	temp_time = 1;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <fsm_setting+0x2b0>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
	            if (isButtonPressed(2) == 1) {
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fb29 	bl	800014c <isButtonPressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d120      	bne.n	8000b42 <fsm_setting+0x2a6>
	                green_time = temp_time;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <fsm_setting+0x2b0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <fsm_setting+0x2c8>)
 8000b06:	6013      	str	r3, [r2, #0]
	                yellow_time = (2 * green_time /3);
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <fsm_setting+0x2c8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <fsm_setting+0x2d8>)
 8000b10:	fb82 1203 	smull	r1, r2, r2, r3
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <fsm_setting+0x2cc>)
 8000b1a:	6013      	str	r3, [r2, #0]
	                red_time = green_time + yellow_time;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <fsm_setting+0x2c8>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <fsm_setting+0x2cc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <fsm_setting+0x2c0>)
 8000b28:	6013      	str	r3, [r2, #0]
	                status = AUTO_RED_GREEN;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <fsm_setting+0x2ac>)
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 8000b30:	f000 fea8 	bl	8001884 <clearTrafficLight>
	            break;
 8000b34:	e005      	b.n	8000b42 <fsm_setting+0x2a6>
	            break;
 8000b36:	bf00      	nop
 8000b38:	e004      	b.n	8000b44 <fsm_setting+0x2a8>
	            break;
 8000b3a:	bf00      	nop
 8000b3c:	e002      	b.n	8000b44 <fsm_setting+0x2a8>
	            break;
 8000b3e:	bf00      	nop
 8000b40:	e000      	b.n	8000b44 <fsm_setting+0x2a8>
	            break;
 8000b42:	bf00      	nop
	    }
	}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000003c 	.word	0x2000003c
 8000b4c:	2000004c 	.word	0x2000004c
 8000b50:	200000a0 	.word	0x200000a0
 8000b54:	20000090 	.word	0x20000090
 8000b58:	200000a8 	.word	0x200000a8
 8000b5c:	20000040 	.word	0x20000040
 8000b60:	66666667 	.word	0x66666667
 8000b64:	20000044 	.word	0x20000044
 8000b68:	20000048 	.word	0x20000048
 8000b6c:	20000034 	.word	0x20000034
 8000b70:	20000038 	.word	0x20000038
 8000b74:	55555556 	.word	0x55555556

08000b78 <updateClockBuffer>:
 */

#include "led7_segment.h"

int led_buffer[4];
void updateClockBuffer(int hour, int minute) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
    led_buffer[0] = hour / 10;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <updateClockBuffer+0x70>)
 8000b86:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8a:	1092      	asrs	r2, r2, #2
 8000b8c:	17db      	asrs	r3, r3, #31
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <updateClockBuffer+0x74>)
 8000b92:	6013      	str	r3, [r2, #0]
    led_buffer[1] = hour % 10;
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <updateClockBuffer+0x70>)
 8000b98:	fb83 2301 	smull	r2, r3, r3, r1
 8000b9c:	109a      	asrs	r2, r3, #2
 8000b9e:	17cb      	asrs	r3, r1, #31
 8000ba0:	1ad2      	subs	r2, r2, r3
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	1aca      	subs	r2, r1, r3
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <updateClockBuffer+0x74>)
 8000bae:	605a      	str	r2, [r3, #4]
    led_buffer[2] = minute / 10;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <updateClockBuffer+0x70>)
 8000bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb8:	1092      	asrs	r2, r2, #2
 8000bba:	17db      	asrs	r3, r3, #31
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <updateClockBuffer+0x74>)
 8000bc0:	6093      	str	r3, [r2, #8]
    led_buffer[3] = minute % 10;
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <updateClockBuffer+0x70>)
 8000bc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000bca:	109a      	asrs	r2, r3, #2
 8000bcc:	17cb      	asrs	r3, r1, #31
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	1aca      	subs	r2, r1, r3
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <updateClockBuffer+0x74>)
 8000bdc:	60da      	str	r2, [r3, #12]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	66666667 	.word	0x66666667
 8000bec:	200000b4 	.word	0x200000b4

08000bf0 <display7SEG>:


void display7SEG(int num)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	48b7      	ldr	r0, [pc, #732]	; (8000edc <display7SEG+0x2ec>)
 8000bfe:	f001 f9be 	bl	8001f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c08:	48b4      	ldr	r0, [pc, #720]	; (8000edc <display7SEG+0x2ec>)
 8000c0a:	f001 f9b8 	bl	8001f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	48b1      	ldr	r0, [pc, #708]	; (8000edc <display7SEG+0x2ec>)
 8000c16:	f001 f9b2 	bl	8001f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c20:	48ae      	ldr	r0, [pc, #696]	; (8000edc <display7SEG+0x2ec>)
 8000c22:	f001 f9ac 	bl	8001f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2c:	48ab      	ldr	r0, [pc, #684]	; (8000edc <display7SEG+0x2ec>)
 8000c2e:	f001 f9a6 	bl	8001f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c38:	48a8      	ldr	r0, [pc, #672]	; (8000edc <display7SEG+0x2ec>)
 8000c3a:	f001 f9a0 	bl	8001f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c44:	48a5      	ldr	r0, [pc, #660]	; (8000edc <display7SEG+0x2ec>)
 8000c46:	f001 f99a 	bl	8001f7e <HAL_GPIO_WritePin>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	f200 813f 	bhi.w	8000ed0 <display7SEG+0x2e0>
 8000c52:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <display7SEG+0x68>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000cc9 	.word	0x08000cc9
 8000c60:	08000ce3 	.word	0x08000ce3
 8000c64:	08000d1f 	.word	0x08000d1f
 8000c68:	08000d5b 	.word	0x08000d5b
 8000c6c:	08000d8d 	.word	0x08000d8d
 8000c70:	08000dc9 	.word	0x08000dc9
 8000c74:	08000e11 	.word	0x08000e11
 8000c78:	08000e35 	.word	0x08000e35
 8000c7c:	08000e89 	.word	0x08000e89

    switch(num) {
        case 0:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	4895      	ldr	r0, [pc, #596]	; (8000edc <display7SEG+0x2ec>)
 8000c86:	f001 f97a 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	4892      	ldr	r0, [pc, #584]	; (8000edc <display7SEG+0x2ec>)
 8000c92:	f001 f974 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9c:	488f      	ldr	r0, [pc, #572]	; (8000edc <display7SEG+0x2ec>)
 8000c9e:	f001 f96e 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	488c      	ldr	r0, [pc, #560]	; (8000edc <display7SEG+0x2ec>)
 8000caa:	f001 f968 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb4:	4889      	ldr	r0, [pc, #548]	; (8000edc <display7SEG+0x2ec>)
 8000cb6:	f001 f962 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc0:	4886      	ldr	r0, [pc, #536]	; (8000edc <display7SEG+0x2ec>)
 8000cc2:	f001 f95c 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000cc6:	e104      	b.n	8000ed2 <display7SEG+0x2e2>
        case 1:
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cce:	4883      	ldr	r0, [pc, #524]	; (8000edc <display7SEG+0x2ec>)
 8000cd0:	f001 f955 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cda:	4880      	ldr	r0, [pc, #512]	; (8000edc <display7SEG+0x2ec>)
 8000cdc:	f001 f94f 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000ce0:	e0f7      	b.n	8000ed2 <display7SEG+0x2e2>
        case 2:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	487d      	ldr	r0, [pc, #500]	; (8000edc <display7SEG+0x2ec>)
 8000ce8:	f001 f949 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf2:	487a      	ldr	r0, [pc, #488]	; (8000edc <display7SEG+0x2ec>)
 8000cf4:	f001 f943 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfe:	4877      	ldr	r0, [pc, #476]	; (8000edc <display7SEG+0x2ec>)
 8000d00:	f001 f93d 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0a:	4874      	ldr	r0, [pc, #464]	; (8000edc <display7SEG+0x2ec>)
 8000d0c:	f001 f937 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	4871      	ldr	r0, [pc, #452]	; (8000edc <display7SEG+0x2ec>)
 8000d18:	f001 f931 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000d1c:	e0d9      	b.n	8000ed2 <display7SEG+0x2e2>
        case 3:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	486e      	ldr	r0, [pc, #440]	; (8000edc <display7SEG+0x2ec>)
 8000d24:	f001 f92b 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2e:	486b      	ldr	r0, [pc, #428]	; (8000edc <display7SEG+0x2ec>)
 8000d30:	f001 f925 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	4868      	ldr	r0, [pc, #416]	; (8000edc <display7SEG+0x2ec>)
 8000d3c:	f001 f91f 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d46:	4865      	ldr	r0, [pc, #404]	; (8000edc <display7SEG+0x2ec>)
 8000d48:	f001 f919 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d52:	4862      	ldr	r0, [pc, #392]	; (8000edc <display7SEG+0x2ec>)
 8000d54:	f001 f913 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000d58:	e0bb      	b.n	8000ed2 <display7SEG+0x2e2>
        case 4:
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d60:	485e      	ldr	r0, [pc, #376]	; (8000edc <display7SEG+0x2ec>)
 8000d62:	f001 f90c 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6c:	485b      	ldr	r0, [pc, #364]	; (8000edc <display7SEG+0x2ec>)
 8000d6e:	f001 f906 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d78:	4858      	ldr	r0, [pc, #352]	; (8000edc <display7SEG+0x2ec>)
 8000d7a:	f001 f900 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d84:	4855      	ldr	r0, [pc, #340]	; (8000edc <display7SEG+0x2ec>)
 8000d86:	f001 f8fa 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000d8a:	e0a2      	b.n	8000ed2 <display7SEG+0x2e2>
        case 5:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4852      	ldr	r0, [pc, #328]	; (8000edc <display7SEG+0x2ec>)
 8000d92:	f001 f8f4 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	484f      	ldr	r0, [pc, #316]	; (8000edc <display7SEG+0x2ec>)
 8000d9e:	f001 f8ee 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	484c      	ldr	r0, [pc, #304]	; (8000edc <display7SEG+0x2ec>)
 8000daa:	f001 f8e8 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	4849      	ldr	r0, [pc, #292]	; (8000edc <display7SEG+0x2ec>)
 8000db6:	f001 f8e2 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	4846      	ldr	r0, [pc, #280]	; (8000edc <display7SEG+0x2ec>)
 8000dc2:	f001 f8dc 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000dc6:	e084      	b.n	8000ed2 <display7SEG+0x2e2>
        case 6:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	4843      	ldr	r0, [pc, #268]	; (8000edc <display7SEG+0x2ec>)
 8000dce:	f001 f8d6 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd8:	4840      	ldr	r0, [pc, #256]	; (8000edc <display7SEG+0x2ec>)
 8000dda:	f001 f8d0 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de4:	483d      	ldr	r0, [pc, #244]	; (8000edc <display7SEG+0x2ec>)
 8000de6:	f001 f8ca 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df0:	483a      	ldr	r0, [pc, #232]	; (8000edc <display7SEG+0x2ec>)
 8000df2:	f001 f8c4 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfc:	4837      	ldr	r0, [pc, #220]	; (8000edc <display7SEG+0x2ec>)
 8000dfe:	f001 f8be 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e08:	4834      	ldr	r0, [pc, #208]	; (8000edc <display7SEG+0x2ec>)
 8000e0a:	f001 f8b8 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000e0e:	e060      	b.n	8000ed2 <display7SEG+0x2e2>
        case 7:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	4831      	ldr	r0, [pc, #196]	; (8000edc <display7SEG+0x2ec>)
 8000e16:	f001 f8b2 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e20:	482e      	ldr	r0, [pc, #184]	; (8000edc <display7SEG+0x2ec>)
 8000e22:	f001 f8ac 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2c:	482b      	ldr	r0, [pc, #172]	; (8000edc <display7SEG+0x2ec>)
 8000e2e:	f001 f8a6 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000e32:	e04e      	b.n	8000ed2 <display7SEG+0x2e2>
        case 8:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	4828      	ldr	r0, [pc, #160]	; (8000edc <display7SEG+0x2ec>)
 8000e3a:	f001 f8a0 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e44:	4825      	ldr	r0, [pc, #148]	; (8000edc <display7SEG+0x2ec>)
 8000e46:	f001 f89a 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e50:	4822      	ldr	r0, [pc, #136]	; (8000edc <display7SEG+0x2ec>)
 8000e52:	f001 f894 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	481f      	ldr	r0, [pc, #124]	; (8000edc <display7SEG+0x2ec>)
 8000e5e:	f001 f88e 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	481c      	ldr	r0, [pc, #112]	; (8000edc <display7SEG+0x2ec>)
 8000e6a:	f001 f888 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e74:	4819      	ldr	r0, [pc, #100]	; (8000edc <display7SEG+0x2ec>)
 8000e76:	f001 f882 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <display7SEG+0x2ec>)
 8000e82:	f001 f87c 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000e86:	e024      	b.n	8000ed2 <display7SEG+0x2e2>
        case 9:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <display7SEG+0x2ec>)
 8000e8e:	f001 f876 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	4810      	ldr	r0, [pc, #64]	; (8000edc <display7SEG+0x2ec>)
 8000e9a:	f001 f870 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <display7SEG+0x2ec>)
 8000ea6:	f001 f86a 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <display7SEG+0x2ec>)
 8000eb2:	f001 f864 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <display7SEG+0x2ec>)
 8000ebe:	f001 f85e 	bl	8001f7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <display7SEG+0x2ec>)
 8000eca:	f001 f858 	bl	8001f7e <HAL_GPIO_WritePin>
            break;
 8000ece:	e000      	b.n	8000ed2 <display7SEG+0x2e2>
        default :
        	break ;
 8000ed0:	bf00      	nop
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010800 	.word	0x40010800

08000ee0 <update7SEG>:

void update7SEG(int index) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2108      	movs	r1, #8
 8000eec:	4846      	ldr	r0, [pc, #280]	; (8001008 <update7SEG+0x128>)
 8000eee:	f001 f846 	bl	8001f7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	4844      	ldr	r0, [pc, #272]	; (8001008 <update7SEG+0x128>)
 8000ef8:	f001 f841 	bl	8001f7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2120      	movs	r1, #32
 8000f00:	4841      	ldr	r0, [pc, #260]	; (8001008 <update7SEG+0x128>)
 8000f02:	f001 f83c 	bl	8001f7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2140      	movs	r1, #64	; 0x40
 8000f0a:	483f      	ldr	r0, [pc, #252]	; (8001008 <update7SEG+0x128>)
 8000f0c:	f001 f837 	bl	8001f7e <HAL_GPIO_WritePin>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d872      	bhi.n	8000ffc <update7SEG+0x11c>
 8000f16:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <update7SEG+0x3c>)
 8000f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f61 	.word	0x08000f61
 8000f24:	08000f95 	.word	0x08000f95
 8000f28:	08000fc9 	.word	0x08000fc9
switch (index) {
	case 0:
	// Display the first 7 SEG with led_buffer [0]
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2108      	movs	r1, #8
 8000f30:	4835      	ldr	r0, [pc, #212]	; (8001008 <update7SEG+0x128>)
 8000f32:	f001 f824 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2110      	movs	r1, #16
 8000f3a:	4833      	ldr	r0, [pc, #204]	; (8001008 <update7SEG+0x128>)
 8000f3c:	f001 f81f 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2120      	movs	r1, #32
 8000f44:	4830      	ldr	r0, [pc, #192]	; (8001008 <update7SEG+0x128>)
 8000f46:	f001 f81a 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	482e      	ldr	r0, [pc, #184]	; (8001008 <update7SEG+0x128>)
 8000f50:	f001 f815 	bl	8001f7e <HAL_GPIO_WritePin>
        display7SEG(led_buffer[0]);
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <update7SEG+0x12c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe49 	bl	8000bf0 <display7SEG>
        break ;
 8000f5e:	e04e      	b.n	8000ffe <update7SEG+0x11e>
	case 1:
	// Display the second 7 SEG with led_buffer [1]
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2108      	movs	r1, #8
 8000f64:	4828      	ldr	r0, [pc, #160]	; (8001008 <update7SEG+0x128>)
 8000f66:	f001 f80a 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	4826      	ldr	r0, [pc, #152]	; (8001008 <update7SEG+0x128>)
 8000f70:	f001 f805 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2120      	movs	r1, #32
 8000f78:	4823      	ldr	r0, [pc, #140]	; (8001008 <update7SEG+0x128>)
 8000f7a:	f001 f800 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <update7SEG+0x128>)
 8000f84:	f000 fffb 	bl	8001f7e <HAL_GPIO_WritePin>
        display7SEG(led_buffer[1]);
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <update7SEG+0x12c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe2f 	bl	8000bf0 <display7SEG>
        break ;
 8000f92:	e034      	b.n	8000ffe <update7SEG+0x11e>
	case 2:
	// Display the third 7 SEG with led_buffer [2]
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	481b      	ldr	r0, [pc, #108]	; (8001008 <update7SEG+0x128>)
 8000f9a:	f000 fff0 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4819      	ldr	r0, [pc, #100]	; (8001008 <update7SEG+0x128>)
 8000fa4:	f000 ffeb 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <update7SEG+0x128>)
 8000fae:	f000 ffe6 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <update7SEG+0x128>)
 8000fb8:	f000 ffe1 	bl	8001f7e <HAL_GPIO_WritePin>
        display7SEG(led_buffer[2]);
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <update7SEG+0x12c>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fe15 	bl	8000bf0 <display7SEG>
        break ;
 8000fc6:	e01a      	b.n	8000ffe <update7SEG+0x11e>
	case 3:
	// Display the forth 7 SEG with led_buffer [3]
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2108      	movs	r1, #8
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <update7SEG+0x128>)
 8000fce:	f000 ffd6 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <update7SEG+0x128>)
 8000fd8:	f000 ffd1 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2120      	movs	r1, #32
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <update7SEG+0x128>)
 8000fe2:	f000 ffcc 	bl	8001f7e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2140      	movs	r1, #64	; 0x40
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <update7SEG+0x128>)
 8000fec:	f000 ffc7 	bl	8001f7e <HAL_GPIO_WritePin>
        display7SEG(led_buffer[3]);
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <update7SEG+0x12c>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fdfb 	bl	8000bf0 <display7SEG>
        break ;
 8000ffa:	e000      	b.n	8000ffe <update7SEG+0x11e>
	default :
		break ;
 8000ffc:	bf00      	nop
	}
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010c00 	.word	0x40010c00
 800100c:	200000b4 	.word	0x200000b4

08001010 <led>:
/**
  * @brief  The application entry point.
  * @retval int
  */

void led(){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001014:	2102      	movs	r1, #2
 8001016:	4802      	ldr	r0, [pc, #8]	; (8001020 <led+0x10>)
 8001018:	f000 ffc9 	bl	8001fae <HAL_GPIO_TogglePin>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40010800 	.word	0x40010800

08001024 <main>:
//}



int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f000 fca8 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f82a 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 f8b0 	bl	8001194 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001034:	f000 f862 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2) ;
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <main+0x4c>)
 800103a:	f001 fbfd 	bl	8002838 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init () ;
 800103e:	f000 f91e 	bl	800127e <SCH_Init>
//  SCH_Add_Task(Task1, 50, 50);
//  SCH_Add_Task(Task2, 100, 100);
//  SCH_Add_Task(Task3, 150, 0);
  SCH_Add_Task(led, 50, 100);
 8001042:	2264      	movs	r2, #100	; 0x64
 8001044:	2132      	movs	r1, #50	; 0x32
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <main+0x50>)
 8001048:	f000 f92e 	bl	80012a8 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	2100      	movs	r1, #0
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <main+0x54>)
 8001052:	f000 f929 	bl	80012a8 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	2100      	movs	r1, #0
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <main+0x58>)
 800105c:	f000 f924 	bl	80012a8 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting, 0, 1);
 8001060:	2201      	movs	r2, #1
 8001062:	2100      	movs	r1, #0
 8001064:	4806      	ldr	r0, [pc, #24]	; (8001080 <main+0x5c>)
 8001066:	f000 f91f 	bl	80012a8 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800106a:	f000 fa39 	bl	80014e0 <SCH_Dispatch_Tasks>
 800106e:	e7fc      	b.n	800106a <main+0x46>
 8001070:	20000128 	.word	0x20000128
 8001074:	08001011 	.word	0x08001011
 8001078:	080002c1 	.word	0x080002c1
 800107c:	08000739 	.word	0x08000739
 8001080:	0800089d 	.word	0x0800089d

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	; 0x40
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2228      	movs	r2, #40	; 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f001 ff80 	bl	8002f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 ff90 	bl	8001fe0 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010c6:	f000 f8d5 	bl	8001274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 f9fc 	bl	80024e0 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f8c1 	bl	8001274 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	; 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM2_Init+0x94>)
 800111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM2_Init+0x94>)
 8001122:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_TIM2_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM2_Init+0x94>)
 8001130:	2209      	movs	r2, #9
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM2_Init+0x94>)
 8001142:	f001 fb29 	bl	8002798 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800114c:	f000 f892 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM2_Init+0x94>)
 800115e:	f001 fca7 	bl	8002ab0 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 f884 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM2_Init+0x94>)
 800117a:	f001 fe7f 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f876 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000128 	.word	0x20000128

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_GPIO_Init+0xb8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a27      	ldr	r2, [pc, #156]	; (800124c <MX_GPIO_Init+0xb8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <MX_GPIO_Init+0xb8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <MX_GPIO_Init+0xb8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a21      	ldr	r2, [pc, #132]	; (800124c <MX_GPIO_Init+0xb8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_GPIO_Init+0xb8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 80011d8:	2200      	movs	r2, #0
 80011da:	f643 71f2 	movw	r1, #16370	; 0x3ff2
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <MX_GPIO_Init+0xbc>)
 80011e0:	f000 fecd 	bl	8001f7e <HAL_GPIO_WritePin>
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin
 80011e4:	2200      	movs	r2, #0
 80011e6:	217f      	movs	r1, #127	; 0x7f
 80011e8:	481a      	ldr	r0, [pc, #104]	; (8001254 <MX_GPIO_Init+0xc0>)
 80011ea:	f000 fec8 	bl	8001f7e <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 80011ee:	f643 73f2 	movw	r3, #16370	; 0x3ff2
 80011f2:	60bb      	str	r3, [r7, #8]
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2302      	movs	r3, #2
 80011fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4619      	mov	r1, r3
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <MX_GPIO_Init+0xbc>)
 8001208:	f000 fd28 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin
 800120c:	237f      	movs	r3, #127	; 0x7f
 800120e:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4619      	mov	r1, r3
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_GPIO_Init+0xc0>)
 8001224:	f000 fd1a 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|B2_Pin;
 8001228:	f44f 7360 	mov.w	r3, #896	; 0x380
 800122c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_GPIO_Init+0xc0>)
 800123e:	f000 fd0d 	bl	8001c5c <HAL_GPIO_Init>

}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800
 8001254:	40010c00 	.word	0x40010c00

08001258 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001260:	f000 f9d4 	bl	800160c <timerRun>
	getKeyInput();
 8001264:	f7fe ff8c 	bl	8000180 <getKeyInput>
	SCH_Update();
 8001268:	f000 f8cc 	bl	8001404 <SCH_Update>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>

0800127e <SCH_Init>:
 */

#include "scheduler.h"
int counter;
//sTask SCH_task_G[];
void SCH_Init(void){
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001284:	2300      	movs	r3, #0
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	e006      	b.n	8001298 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f859 	bl	8001344 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	3301      	adds	r3, #1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b04      	cmp	r3, #4
 800129c:	d9f5      	bls.n	800128a <SCH_Init+0xc>
	}
};
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <SCH_Add_Task>:
unsigned char SCH_Add_Task(void (* pFunction)() , unsigned int DELAY, unsigned int PERIOD){
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]
	while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 80012b8:	e002      	b.n	80012c0 <SCH_Add_Task+0x18>
		Index++;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	3301      	adds	r3, #1
 80012be:	75fb      	strb	r3, [r7, #23]
	while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 80012c0:	7dfa      	ldrb	r2, [r7, #23]
 80012c2:	491f      	ldr	r1, [pc, #124]	; (8001340 <SCH_Add_Task+0x98>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <SCH_Add_Task+0x32>
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d9ef      	bls.n	80012ba <SCH_Add_Task+0x12>
	}
	if (Index >= SCH_MAX_TASKS || Index < 0){
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d901      	bls.n	80012e4 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASKS;
 80012e0:	2305      	movs	r3, #5
 80012e2:	e027      	b.n	8001334 <SCH_Add_Task+0x8c>
	}

	SCH_tasks_G[Index].pTask = pFunction;
 80012e4:	7dfa      	ldrb	r2, [r7, #23]
 80012e6:	4916      	ldr	r1, [pc, #88]	; (8001340 <SCH_Add_Task+0x98>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 80012f6:	7dfa      	ldrb	r2, [r7, #23]
 80012f8:	4911      	ldr	r1, [pc, #68]	; (8001340 <SCH_Add_Task+0x98>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3304      	adds	r3, #4
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 800130a:	7dfa      	ldrb	r2, [r7, #23]
 800130c:	490c      	ldr	r1, [pc, #48]	; (8001340 <SCH_Add_Task+0x98>)
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	3308      	adds	r3, #8
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 800131e:	7dfa      	ldrb	r2, [r7, #23]
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <SCH_Add_Task+0x98>)
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	330c      	adds	r3, #12
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]

	return Index;
 8001332:	7dfb      	ldrb	r3, [r7, #23]
};
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200000c4 	.word	0x200000c4

08001344 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const int TASK_INDEX){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if(TASK_INDEX < 0 || TASK_INDEX > counter-1 || counter == 0){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db08      	blt.n	8001364 <SCH_Delete_Task+0x20>
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <SCH_Delete_Task+0xb8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	da03      	bge.n	8001364 <SCH_Delete_Task+0x20>
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <SCH_Delete_Task+0xb8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <SCH_Delete_Task+0x28>
		return counter;
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <SCH_Delete_Task+0xb8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e041      	b.n	80013f0 <SCH_Delete_Task+0xac>
	}
	else{
		if(counter == 1){
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <SCH_Delete_Task+0xb8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d110      	bne.n	8001396 <SCH_Delete_Task+0x52>
			SCH_tasks_G[0].pTask = 0x0000;
 8001374:	4b22      	ldr	r3, [pc, #136]	; (8001400 <SCH_Delete_Task+0xbc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[0].Delay = 0;
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <SCH_Delete_Task+0xbc>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
			SCH_tasks_G[0].Period = 0;
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <SCH_Delete_Task+0xbc>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
			SCH_tasks_G[0].RunMe = 0;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <SCH_Delete_Task+0xbc>)
 8001388:	2200      	movs	r2, #0
 800138a:	731a      	strb	r2, [r3, #12]
			counter = 0;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <SCH_Delete_Task+0xb8>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
			return 1;
 8001392:	2301      	movs	r3, #1
 8001394:	e02c      	b.n	80013f0 <SCH_Delete_Task+0xac>
		}
		else{
			SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001396:	491a      	ldr	r1, [pc, #104]	; (8001400 <SCH_Delete_Task+0xbc>)
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[TASK_INDEX].Delay = 0;
 80013a8:	4915      	ldr	r1, [pc, #84]	; (8001400 <SCH_Delete_Task+0xbc>)
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	3304      	adds	r3, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[TASK_INDEX].Period = 0;
 80013bc:	4910      	ldr	r1, [pc, #64]	; (8001400 <SCH_Delete_Task+0xbc>)
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3308      	adds	r3, #8
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80013d0:	490b      	ldr	r1, [pc, #44]	; (8001400 <SCH_Delete_Task+0xbc>)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	330c      	adds	r3, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
			counter--;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SCH_Delete_Task+0xb8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <SCH_Delete_Task+0xb8>)
 80013ec:	6013      	str	r3, [r2, #0]
			return 1;
 80013ee:	2301      	movs	r3, #1
		}
	}
};
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000170 	.word	0x20000170
 8001400:	200000c4 	.word	0x200000c4

08001404 <SCH_Update>:
void SCH_Update(void){
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
	unsigned char Index;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800140a:	2300      	movs	r3, #0
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	e05b      	b.n	80014c8 <SCH_Update+0xc4>
		if(SCH_tasks_G[Index].pTask){
 8001410:	79fa      	ldrb	r2, [r7, #7]
 8001412:	4932      	ldr	r1, [pc, #200]	; (80014dc <SCH_Update+0xd8>)
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d04e      	beq.n	80014c2 <SCH_Update+0xbe>
			if(SCH_tasks_G[Index].Delay == 0){
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	492d      	ldr	r1, [pc, #180]	; (80014dc <SCH_Update+0xd8>)
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	3304      	adds	r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d131      	bne.n	800149e <SCH_Update+0x9a>
				SCH_tasks_G[Index].RunMe++;
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	4927      	ldr	r1, [pc, #156]	; (80014dc <SCH_Update+0xd8>)
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	330c      	adds	r3, #12
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b2d8      	uxtb	r0, r3
 8001450:	4922      	ldr	r1, [pc, #136]	; (80014dc <SCH_Update+0xd8>)
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	330c      	adds	r3, #12
 800145e:	4602      	mov	r2, r0
 8001460:	701a      	strb	r2, [r3, #0]

				if(SCH_tasks_G[Index].Period){
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	491d      	ldr	r1, [pc, #116]	; (80014dc <SCH_Update+0xd8>)
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	3308      	adds	r3, #8
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d024      	beq.n	80014c2 <SCH_Update+0xbe>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001478:	79f9      	ldrb	r1, [r7, #7]
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	4817      	ldr	r0, [pc, #92]	; (80014dc <SCH_Update+0xd8>)
 800147e:	460b      	mov	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4403      	add	r3, r0
 8001488:	3308      	adds	r3, #8
 800148a:	6819      	ldr	r1, [r3, #0]
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <SCH_Update+0xd8>)
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4403      	add	r3, r0
 8001498:	3304      	adds	r3, #4
 800149a:	6019      	str	r1, [r3, #0]
 800149c:	e011      	b.n	80014c2 <SCH_Update+0xbe>
				}
			}
			else{
				SCH_tasks_G[Index].Delay--;
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	490e      	ldr	r1, [pc, #56]	; (80014dc <SCH_Update+0xd8>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3304      	adds	r3, #4
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1e59      	subs	r1, r3, #1
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <SCH_Update+0xd8>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4403      	add	r3, r0
 80014be:	3304      	adds	r3, #4
 80014c0:	6019      	str	r1, [r3, #0]
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	3301      	adds	r3, #1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d9a0      	bls.n	8001410 <SCH_Update+0xc>
			}
		}
	}
};
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200000c4 	.word	0x200000c4

080014e0 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

	unsigned char Index;
		for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
 80014ea:	e049      	b.n	8001580 <SCH_Dispatch_Tasks+0xa0>
		if(SCH_tasks_G[Index].RunMe > 0) {
 80014ec:	7dfa      	ldrb	r2, [r7, #23]
 80014ee:	4928      	ldr	r1, [pc, #160]	; (8001590 <SCH_Dispatch_Tasks+0xb0>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	330c      	adds	r3, #12
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d03b      	beq.n	800157a <SCH_Dispatch_Tasks+0x9a>
			(*SCH_tasks_G[Index].pTask)();
 8001502:	7dfa      	ldrb	r2, [r7, #23]
 8001504:	4922      	ldr	r1, [pc, #136]	; (8001590 <SCH_Dispatch_Tasks+0xb0>)
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--;
 8001514:	7dfa      	ldrb	r2, [r7, #23]
 8001516:	491e      	ldr	r1, [pc, #120]	; (8001590 <SCH_Dispatch_Tasks+0xb0>)
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	330c      	adds	r3, #12
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3b01      	subs	r3, #1
 8001528:	b2d8      	uxtb	r0, r3
 800152a:	4919      	ldr	r1, [pc, #100]	; (8001590 <SCH_Dispatch_Tasks+0xb0>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	330c      	adds	r3, #12
 8001538:	4602      	mov	r2, r0
 800153a:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0){
 800153c:	7dfa      	ldrb	r2, [r7, #23]
 800153e:	4914      	ldr	r1, [pc, #80]	; (8001590 <SCH_Dispatch_Tasks+0xb0>)
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	3308      	adds	r3, #8
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d104      	bne.n	800155c <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete_Task(Index);
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fef5 	bl	8001344 <SCH_Delete_Task>
 800155a:	e00e      	b.n	800157a <SCH_Dispatch_Tasks+0x9a>
			}
			else{
				 sTask temp;
				 temp.Period = SCH_tasks_G[0].Period;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <SCH_Dispatch_Tasks+0xb0>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	60bb      	str	r3, [r7, #8]
				 temp.pTask = SCH_tasks_G[0].pTask;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <SCH_Dispatch_Tasks+0xb0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	603b      	str	r3, [r7, #0]
				 SCH_Delete_Task(0);
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff feeb 	bl	8001344 <SCH_Delete_Task>
				 SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe97 	bl	80012a8 <SCH_Add_Task>
		for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	3301      	adds	r3, #1
 800157e:	75fb      	strb	r3, [r7, #23]
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	2b04      	cmp	r3, #4
 8001584:	d9b2      	bls.n	80014ec <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
};
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200000c4 	.word	0x200000c4

08001594 <setTimer1>:
void setTimer0(int duration) {
	timer0_counter = duration;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <setTimer1+0x20>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <setTimer1+0x24>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000094 	.word	0x20000094
 80015b8:	20000098 	.word	0x20000098

080015bc <setTimer2>:
void clearTimer1(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void setTimer2(int duration){
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80015c4:	4a05      	ldr	r2, [pc, #20]	; (80015dc <setTimer2+0x20>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <setTimer2+0x24>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000009c 	.word	0x2000009c
 80015e0:	200000a0 	.word	0x200000a0

080015e4 <setTimer3>:

void setTimer3(int duration) {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <setTimer3+0x20>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <setTimer3+0x24>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200000a4 	.word	0x200000a4
 8001608:	200000a8 	.word	0x200000a8

0800160c <timerRun>:
void timerRun(){
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <timerRun+0xac>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd0c      	ble.n	8001632 <timerRun+0x26>
		timer1_counter--;
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <timerRun+0xac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <timerRun+0xac>)
 8001620:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <timerRun+0xac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	dc06      	bgt.n	8001638 <timerRun+0x2c>
		timer1_flag = 1;
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <timerRun+0xb0>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e002      	b.n	8001638 <timerRun+0x2c>
		}
	}
	else{
		timer1_flag = 1;
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <timerRun+0xb0>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter >0){
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <timerRun+0xb4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	dd0c      	ble.n	800165a <timerRun+0x4e>
			timer2_counter--;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <timerRun+0xb4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3b01      	subs	r3, #1
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <timerRun+0xb4>)
 8001648:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <timerRun+0xb4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	dc06      	bgt.n	8001660 <timerRun+0x54>
				timer2_flag = 1;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <timerRun+0xb8>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e002      	b.n	8001660 <timerRun+0x54>
			}
		}
	else{
			timer2_flag = 1;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <timerRun+0xb8>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
		}
	if (timer3_counter > 0) {
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <timerRun+0xbc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dd0c      	ble.n	8001682 <timerRun+0x76>
			timer3_counter--;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <timerRun+0xbc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <timerRun+0xbc>)
 8001670:	6013      	str	r3, [r2, #0]
	        if (timer3_counter <= 0) {
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <timerRun+0xbc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	dc06      	bgt.n	8001688 <timerRun+0x7c>
	        	timer3_flag = 1;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <timerRun+0xc0>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e002      	b.n	8001688 <timerRun+0x7c>
	        }
	}
	else{
			timer3_flag = 1;
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <timerRun+0xc0>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
		}
	if (timer0_counter > 0) {
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <timerRun+0xc4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	dd0c      	ble.n	80016aa <timerRun+0x9e>
		timer0_counter--;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <timerRun+0xc4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <timerRun+0xc4>)
 8001698:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0)
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <timerRun+0xc4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <timerRun+0xa4>
			timer0_flag = 1;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <timerRun+0xc8>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
		}
	else{
			timer0_flag = 1;
		}
}
 80016a8:	e002      	b.n	80016b0 <timerRun+0xa4>
			timer0_flag = 1;
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <timerRun+0xc8>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000094 	.word	0x20000094
 80016bc:	20000098 	.word	0x20000098
 80016c0:	2000009c 	.word	0x2000009c
 80016c4:	200000a0 	.word	0x200000a0
 80016c8:	200000a4 	.word	0x200000a4
 80016cc:	200000a8 	.word	0x200000a8
 80016d0:	200000ac 	.word	0x200000ac
 80016d4:	200000b0 	.word	0x200000b0

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_MspInit+0x5c>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_MspInit+0x5c>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6193      	str	r3, [r2, #24]
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_MspInit+0x5c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x5c>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_MspInit+0x5c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x5c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_MspInit+0x60>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_MspInit+0x60>)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000

0800173c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174c:	d113      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_TIM_Base_MspInit+0x44>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_TIM_Base_MspInit+0x44>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_TIM_Base_MspInit+0x44>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	201c      	movs	r0, #28
 800176c:	f000 fa3f 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001770:	201c      	movs	r0, #28
 8001772:	f000 fa58 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ca:	f000 f91d 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f001 f879 	bl	80028d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000128 	.word	0x20000128

080017e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <ledRedGreen>:
//
#include "traffic_light.h"



void ledRedGreen(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2110      	movs	r1, #16
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <ledRedGreen+0x1c>)
 80017fe:	f000 fbbe 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8001802:	2201      	movs	r2, #1
 8001804:	2104      	movs	r1, #4
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <ledRedGreen+0x20>)
 8001808:	f000 fbb9 	bl	8001f7e <HAL_GPIO_WritePin>
	}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00

08001818 <ledRedYellow>:

void ledRedYellow(){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2110      	movs	r1, #16
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <ledRedYellow+0x1c>)
 8001822:	f000 fbac 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2102      	movs	r1, #2
 800182a:	4803      	ldr	r0, [pc, #12]	; (8001838 <ledRedYellow+0x20>)
 800182c:	f000 fba7 	bl	8001f7e <HAL_GPIO_WritePin>
	}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40010800 	.word	0x40010800
 8001838:	40010c00 	.word	0x40010c00

0800183c <ledGreenRed>:

void ledGreenRed(){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2140      	movs	r1, #64	; 0x40
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <ledGreenRed+0x1c>)
 8001846:	f000 fb9a 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 800184a:	2201      	movs	r2, #1
 800184c:	2101      	movs	r1, #1
 800184e:	4803      	ldr	r0, [pc, #12]	; (800185c <ledGreenRed+0x20>)
 8001850:	f000 fb95 	bl	8001f7e <HAL_GPIO_WritePin>
	}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40010800 	.word	0x40010800
 800185c:	40010c00 	.word	0x40010c00

08001860 <ledYellowRed>:

void ledYellowRed(){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2120      	movs	r1, #32
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <ledYellowRed+0x1c>)
 800186a:	f000 fb88 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	2101      	movs	r1, #1
 8001872:	4803      	ldr	r0, [pc, #12]	; (8001880 <ledYellowRed+0x20>)
 8001874:	f000 fb83 	bl	8001f7e <HAL_GPIO_WritePin>
	}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40010800 	.word	0x40010800
 8001880:	40010c00 	.word	0x40010c00

08001884 <clearTrafficLight>:

void clearTrafficLight(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2110      	movs	r1, #16
 800188c:	480e      	ldr	r0, [pc, #56]	; (80018c8 <clearTrafficLight+0x44>)
 800188e:	f000 fb76 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	480c      	ldr	r0, [pc, #48]	; (80018c8 <clearTrafficLight+0x44>)
 8001898:	f000 fb71 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2120      	movs	r1, #32
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <clearTrafficLight+0x44>)
 80018a2:	f000 fb6c 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2101      	movs	r1, #1
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <clearTrafficLight+0x48>)
 80018ac:	f000 fb67 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2104      	movs	r1, #4
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <clearTrafficLight+0x48>)
 80018b6:	f000 fb62 	bl	8001f7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2102      	movs	r1, #2
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <clearTrafficLight+0x48>)
 80018c0:	f000 fb5d 	bl	8001f7e <HAL_GPIO_WritePin>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00

080018d0 <toggleRedLED>:

void toggleRedLED(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80018d4:	2110      	movs	r1, #16
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <toggleRedLED+0x18>)
 80018d8:	f000 fb69 	bl	8001fae <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 80018dc:	2101      	movs	r1, #1
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <toggleRedLED+0x1c>)
 80018e0:	f000 fb65 	bl	8001fae <HAL_GPIO_TogglePin>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40010800 	.word	0x40010800
 80018ec:	40010c00 	.word	0x40010c00

080018f0 <toggleYellowLED>:

void toggleYellowLED(){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80018f4:	2120      	movs	r1, #32
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <toggleYellowLED+0x18>)
 80018f8:	f000 fb59 	bl	8001fae <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 80018fc:	2102      	movs	r1, #2
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <toggleYellowLED+0x1c>)
 8001900:	f000 fb55 	bl	8001fae <HAL_GPIO_TogglePin>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40010800 	.word	0x40010800
 800190c:	40010c00 	.word	0x40010c00

08001910 <toggleGreenLED>:

void toggleGreenLED(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001914:	2140      	movs	r1, #64	; 0x40
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <toggleGreenLED+0x18>)
 8001918:	f000 fb49 	bl	8001fae <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 800191c:	2104      	movs	r1, #4
 800191e:	4803      	ldr	r0, [pc, #12]	; (800192c <toggleGreenLED+0x1c>)
 8001920:	f000 fb45 	bl	8001fae <HAL_GPIO_TogglePin>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010800 	.word	0x40010800
 800192c:	40010c00 	.word	0x40010c00

08001930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001930:	f7ff ff5a 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001936:	490c      	ldr	r1, [pc, #48]	; (8001968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <LoopFillZerobss+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800194c:	4c09      	ldr	r4, [pc, #36]	; (8001974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195a:	f001 faf9 	bl	8002f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195e:	f7ff fb61 	bl	8001024 <main>
  bx lr
 8001962:	4770      	bx	lr
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800196c:	08002fec 	.word	0x08002fec
  ldr r2, =_sbss
 8001970:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001974:	20000178 	.word	0x20000178

08001978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_2_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_Init+0x28>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_Init+0x28>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 f923 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001992:	200f      	movs	r0, #15
 8001994:	f000 f808 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff fe9e 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f93b 	bl	8001c42 <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 f903 	bl	8001bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000050 	.word	0x20000050
 8001a00:	20000058 	.word	0x20000058
 8001a04:	20000054 	.word	0x20000054

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_IncTick+0x1c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x20>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <HAL_IncTick+0x20>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	20000058 	.word	0x20000058
 8001a28:	20000174 	.word	0x20000174

08001a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_GetTick+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000174 	.word	0x20000174

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4906      	ldr	r1, [pc, #24]	; (8001ad8 <__NVIC_EnableIRQ+0x34>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba4:	d301      	bcc.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <SysTick_Config+0x40>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7ff ff90 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SysTick_Config+0x40>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SysTick_Config+0x40>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff2d 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff42 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff90 	bl	8001b30 <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5f 	bl	8001adc <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff35 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa2 	bl	8001b94 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b08b      	sub	sp, #44	; 0x2c
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6e:	e148      	b.n	8001f02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c70:	2201      	movs	r2, #1
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 8137 	bne.w	8001efc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4aa3      	ldr	r2, [pc, #652]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d05e      	beq.n	8001d56 <HAL_GPIO_Init+0xfa>
 8001c98:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d875      	bhi.n	8001d8a <HAL_GPIO_Init+0x12e>
 8001c9e:	4aa1      	ldr	r2, [pc, #644]	; (8001f24 <HAL_GPIO_Init+0x2c8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d058      	beq.n	8001d56 <HAL_GPIO_Init+0xfa>
 8001ca4:	4a9f      	ldr	r2, [pc, #636]	; (8001f24 <HAL_GPIO_Init+0x2c8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d86f      	bhi.n	8001d8a <HAL_GPIO_Init+0x12e>
 8001caa:	4a9f      	ldr	r2, [pc, #636]	; (8001f28 <HAL_GPIO_Init+0x2cc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d052      	beq.n	8001d56 <HAL_GPIO_Init+0xfa>
 8001cb0:	4a9d      	ldr	r2, [pc, #628]	; (8001f28 <HAL_GPIO_Init+0x2cc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d869      	bhi.n	8001d8a <HAL_GPIO_Init+0x12e>
 8001cb6:	4a9d      	ldr	r2, [pc, #628]	; (8001f2c <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d04c      	beq.n	8001d56 <HAL_GPIO_Init+0xfa>
 8001cbc:	4a9b      	ldr	r2, [pc, #620]	; (8001f2c <HAL_GPIO_Init+0x2d0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d863      	bhi.n	8001d8a <HAL_GPIO_Init+0x12e>
 8001cc2:	4a9b      	ldr	r2, [pc, #620]	; (8001f30 <HAL_GPIO_Init+0x2d4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d046      	beq.n	8001d56 <HAL_GPIO_Init+0xfa>
 8001cc8:	4a99      	ldr	r2, [pc, #612]	; (8001f30 <HAL_GPIO_Init+0x2d4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d85d      	bhi.n	8001d8a <HAL_GPIO_Init+0x12e>
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d82a      	bhi.n	8001d28 <HAL_GPIO_Init+0xcc>
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d859      	bhi.n	8001d8a <HAL_GPIO_Init+0x12e>
 8001cd6:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <HAL_GPIO_Init+0x80>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	08001d57 	.word	0x08001d57
 8001ce0:	08001d31 	.word	0x08001d31
 8001ce4:	08001d43 	.word	0x08001d43
 8001ce8:	08001d85 	.word	0x08001d85
 8001cec:	08001d8b 	.word	0x08001d8b
 8001cf0:	08001d8b 	.word	0x08001d8b
 8001cf4:	08001d8b 	.word	0x08001d8b
 8001cf8:	08001d8b 	.word	0x08001d8b
 8001cfc:	08001d8b 	.word	0x08001d8b
 8001d00:	08001d8b 	.word	0x08001d8b
 8001d04:	08001d8b 	.word	0x08001d8b
 8001d08:	08001d8b 	.word	0x08001d8b
 8001d0c:	08001d8b 	.word	0x08001d8b
 8001d10:	08001d8b 	.word	0x08001d8b
 8001d14:	08001d8b 	.word	0x08001d8b
 8001d18:	08001d8b 	.word	0x08001d8b
 8001d1c:	08001d8b 	.word	0x08001d8b
 8001d20:	08001d39 	.word	0x08001d39
 8001d24:	08001d4d 	.word	0x08001d4d
 8001d28:	4a82      	ldr	r2, [pc, #520]	; (8001f34 <HAL_GPIO_Init+0x2d8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d2e:	e02c      	b.n	8001d8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	623b      	str	r3, [r7, #32]
          break;
 8001d36:	e029      	b.n	8001d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	623b      	str	r3, [r7, #32]
          break;
 8001d40:	e024      	b.n	8001d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	3308      	adds	r3, #8
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e01f      	b.n	8001d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	330c      	adds	r3, #12
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e01a      	b.n	8001d8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	623b      	str	r3, [r7, #32]
          break;
 8001d62:	e013      	b.n	8001d8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d105      	bne.n	8001d78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	611a      	str	r2, [r3, #16]
          break;
 8001d76:	e009      	b.n	8001d8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d78:	2308      	movs	r3, #8
 8001d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	615a      	str	r2, [r3, #20]
          break;
 8001d82:	e003      	b.n	8001d8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x130>
          break;
 8001d8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	d801      	bhi.n	8001d96 <HAL_GPIO_Init+0x13a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	e001      	b.n	8001d9a <HAL_GPIO_Init+0x13e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2bff      	cmp	r3, #255	; 0xff
 8001da0:	d802      	bhi.n	8001da8 <HAL_GPIO_Init+0x14c>
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0x152>
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	3b08      	subs	r3, #8
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	210f      	movs	r1, #15
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	6a39      	ldr	r1, [r7, #32]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8090 	beq.w	8001efc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ddc:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <HAL_GPIO_Init+0x2dc>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a55      	ldr	r2, [pc, #340]	; (8001f38 <HAL_GPIO_Init+0x2dc>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_GPIO_Init+0x2dc>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_GPIO_Init+0x2e0>)
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a49      	ldr	r2, [pc, #292]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_Init+0x1e0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a48      	ldr	r2, [pc, #288]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_Init+0x1dc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a47      	ldr	r2, [pc, #284]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_Init+0x1d8>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e004      	b.n	8001e3e <HAL_GPIO_Init+0x1e2>
 8001e34:	2303      	movs	r3, #3
 8001e36:	e002      	b.n	8001e3e <HAL_GPIO_Init+0x1e2>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_GPIO_Init+0x1e2>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e40:	f002 0203 	and.w	r2, r2, #3
 8001e44:	0092      	lsls	r2, r2, #2
 8001e46:	4093      	lsls	r3, r2
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e4e:	493b      	ldr	r1, [pc, #236]	; (8001f3c <HAL_GPIO_Init+0x2e0>)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e68:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4937      	ldr	r1, [pc, #220]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e76:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4933      	ldr	r1, [pc, #204]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	492d      	ldr	r1, [pc, #180]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4929      	ldr	r1, [pc, #164]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4923      	ldr	r1, [pc, #140]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	491f      	ldr	r1, [pc, #124]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4919      	ldr	r1, [pc, #100]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4915      	ldr	r1, [pc, #84]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3301      	adds	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f aeaf 	bne.w	8001c70 <HAL_GPIO_Init+0x14>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	372c      	adds	r7, #44	; 0x2c
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	10320000 	.word	0x10320000
 8001f24:	10310000 	.word	0x10310000
 8001f28:	10220000 	.word	0x10220000
 8001f2c:	10210000 	.word	0x10210000
 8001f30:	10120000 	.word	0x10120000
 8001f34:	10110000 	.word	0x10110000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40010800 	.word	0x40010800
 8001f44:	40010c00 	.word	0x40010c00
 8001f48:	40011000 	.word	0x40011000
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	807b      	strh	r3, [r7, #2]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f8e:	787b      	ldrb	r3, [r7, #1]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f9a:	e003      	b.n	8001fa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f9c:	887b      	ldrh	r3, [r7, #2]
 8001f9e:	041a      	lsls	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	400b      	ands	r3, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	611a      	str	r2, [r3, #16]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e26c      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8087 	beq.w	800210e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002000:	4b92      	ldr	r3, [pc, #584]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b04      	cmp	r3, #4
 800200a:	d00c      	beq.n	8002026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800200c:	4b8f      	ldr	r3, [pc, #572]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b08      	cmp	r3, #8
 8002016:	d112      	bne.n	800203e <HAL_RCC_OscConfig+0x5e>
 8002018:	4b8c      	ldr	r3, [pc, #560]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d10b      	bne.n	800203e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	4b89      	ldr	r3, [pc, #548]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d06c      	beq.n	800210c <HAL_RCC_OscConfig+0x12c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d168      	bne.n	800210c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e246      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x76>
 8002048:	4b80      	ldr	r3, [pc, #512]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a7f      	ldr	r2, [pc, #508]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e02e      	b.n	80020b4 <HAL_RCC_OscConfig+0xd4>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x98>
 800205e:	4b7b      	ldr	r3, [pc, #492]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7a      	ldr	r2, [pc, #488]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b78      	ldr	r3, [pc, #480]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a77      	ldr	r2, [pc, #476]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e01d      	b.n	80020b4 <HAL_RCC_OscConfig+0xd4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0xbc>
 8002082:	4b72      	ldr	r3, [pc, #456]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a71      	ldr	r2, [pc, #452]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b6f      	ldr	r3, [pc, #444]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6e      	ldr	r2, [pc, #440]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xd4>
 800209c:	4b6b      	ldr	r3, [pc, #428]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6a      	ldr	r2, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b68      	ldr	r3, [pc, #416]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a67      	ldr	r2, [pc, #412]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fcb6 	bl	8001a2c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fcb2 	bl	8001a2c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1fa      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b5d      	ldr	r3, [pc, #372]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe4>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff fca2 	bl	8001a2c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fc9e 	bl	8001a2c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1e6      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x10c>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800211a:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002126:	4b49      	ldr	r3, [pc, #292]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b08      	cmp	r3, #8
 8002130:	d11c      	bne.n	800216c <HAL_RCC_OscConfig+0x18c>
 8002132:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d116      	bne.n	800216c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	4b43      	ldr	r3, [pc, #268]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x176>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e1ba      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4939      	ldr	r1, [pc, #228]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	e03a      	b.n	80021e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_OscConfig+0x270>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff fc57 	bl	8001a2c <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002182:	f7ff fc53 	bl	8001a2c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e19b      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4927      	ldr	r1, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
 80021b4:	e015      	b.n	80021e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x270>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fc36 	bl	8001a2c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7ff fc32 	bl	8001a2c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e17a      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d03a      	beq.n	8002264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d019      	beq.n	800222a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_RCC_OscConfig+0x274>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7ff fc16 	bl	8001a2c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7ff fc12 	bl	8001a2c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e15a      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002222:	2001      	movs	r0, #1
 8002224:	f000 fa9a 	bl	800275c <RCC_Delay>
 8002228:	e01c      	b.n	8002264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_RCC_OscConfig+0x274>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7ff fbfc 	bl	8001a2c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002236:	e00f      	b.n	8002258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002238:	f7ff fbf8 	bl	8001a2c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d908      	bls.n	8002258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e140      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	42420000 	.word	0x42420000
 8002254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	4b9e      	ldr	r3, [pc, #632]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e9      	bne.n	8002238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a6 	beq.w	80023be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b97      	ldr	r3, [pc, #604]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10d      	bne.n	800229e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b94      	ldr	r3, [pc, #592]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a93      	ldr	r2, [pc, #588]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	61d3      	str	r3, [r2, #28]
 800228e:	4b91      	ldr	r3, [pc, #580]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b8e      	ldr	r3, [pc, #568]	; (80024d8 <HAL_RCC_OscConfig+0x4f8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022aa:	4b8b      	ldr	r3, [pc, #556]	; (80024d8 <HAL_RCC_OscConfig+0x4f8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a8a      	ldr	r2, [pc, #552]	; (80024d8 <HAL_RCC_OscConfig+0x4f8>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7ff fbb9 	bl	8001a2c <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7ff fbb5 	bl	8001a2c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b64      	cmp	r3, #100	; 0x64
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0fd      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x4f8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x312>
 80022e4:	4b7b      	ldr	r3, [pc, #492]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a7a      	ldr	r2, [pc, #488]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	e02d      	b.n	800234e <HAL_RCC_OscConfig+0x36e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x334>
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a75      	ldr	r2, [pc, #468]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a72      	ldr	r2, [pc, #456]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	e01c      	b.n	800234e <HAL_RCC_OscConfig+0x36e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d10c      	bne.n	8002336 <HAL_RCC_OscConfig+0x356>
 800231c:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a6c      	ldr	r2, [pc, #432]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4a69      	ldr	r2, [pc, #420]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6213      	str	r3, [r2, #32]
 8002334:	e00b      	b.n	800234e <HAL_RCC_OscConfig+0x36e>
 8002336:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a66      	ldr	r2, [pc, #408]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a63      	ldr	r2, [pc, #396]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d015      	beq.n	8002382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7ff fb69 	bl	8001a2c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7ff fb65 	bl	8001a2c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e0ab      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ee      	beq.n	800235e <HAL_RCC_OscConfig+0x37e>
 8002380:	e014      	b.n	80023ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7ff fb53 	bl	8001a2c <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7ff fb4f 	bl	8001a2c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	; 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e095      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	4b4c      	ldr	r3, [pc, #304]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ee      	bne.n	800238a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d105      	bne.n	80023be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b2:	4b48      	ldr	r3, [pc, #288]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8081 	beq.w	80024ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c8:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d061      	beq.n	8002498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d146      	bne.n	800246a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023dc:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_RCC_OscConfig+0x4fc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff fb23 	bl	8001a2c <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ea:	f7ff fb1f 	bl	8001a2c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e067      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	d108      	bne.n	8002424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	492d      	ldr	r1, [pc, #180]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a19      	ldr	r1, [r3, #32]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	430b      	orrs	r3, r1
 8002436:	4927      	ldr	r1, [pc, #156]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x4fc>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7ff faf3 	bl	8001a2c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244a:	f7ff faef 	bl	8001a2c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e037      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x46a>
 8002468:	e02f      	b.n	80024ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <HAL_RCC_OscConfig+0x4fc>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7ff fadc 	bl	8001a2c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff fad8 	bl	8001a2c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e020      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x498>
 8002496:	e018      	b.n	80024ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e013      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	42420060 	.word	0x42420060

080024e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0d0      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d910      	bls.n	8002524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0207 	bic.w	r2, r3, #7
 800250a:	4965      	ldr	r1, [pc, #404]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b8      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002554:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800255e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	494d      	ldr	r1, [pc, #308]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d040      	beq.n	8002600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d115      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e07f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e073      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06b      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4936      	ldr	r1, [pc, #216]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d0:	f7ff fa2c 	bl	8001a2c <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7ff fa28 	bl	8001a2c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e053      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d210      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 0207 	bic.w	r2, r3, #7
 8002616:	4922      	ldr	r1, [pc, #136]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e032      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4916      	ldr	r1, [pc, #88]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	490e      	ldr	r1, [pc, #56]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266e:	f000 f821 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8002672:	4602      	mov	r2, r0
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	490a      	ldr	r1, [pc, #40]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	5ccb      	ldrb	r3, [r1, r3]
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1cc>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1d0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f98a 	bl	80019a8 <HAL_InitTick>

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08002fc0 	.word	0x08002fc0
 80026ac:	20000050 	.word	0x20000050
 80026b0:	20000054 	.word	0x20000054

080026b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_RCC_GetSysClockFreq+0x94>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x30>
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x36>
 80026e2:	e027      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_GetSysClockFreq+0x98>)
 80026e6:	613b      	str	r3, [r7, #16]
      break;
 80026e8:	e027      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_RCC_GetSysClockFreq+0x94>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0c5b      	lsrs	r3, r3, #17
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_RCC_GetSysClockFreq+0xa0>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_RCC_GetSysClockFreq+0x98>)
 8002716:	fb02 f203 	mul.w	r2, r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e004      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	613b      	str	r3, [r7, #16]
      break;
 8002732:	e002      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCC_GetSysClockFreq+0x98>)
 8002736:	613b      	str	r3, [r7, #16]
      break;
 8002738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273a:	693b      	ldr	r3, [r7, #16]
}
 800273c:	4618      	mov	r0, r3
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	007a1200 	.word	0x007a1200
 8002750:	08002fd0 	.word	0x08002fd0
 8002754:	08002fe0 	.word	0x08002fe0
 8002758:	003d0900 	.word	0x003d0900

0800275c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <RCC_Delay+0x34>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <RCC_Delay+0x38>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0a5b      	lsrs	r3, r3, #9
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002778:	bf00      	nop
  }
  while (Delay --);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1e5a      	subs	r2, r3, #1
 800277e:	60fa      	str	r2, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f9      	bne.n	8002778 <RCC_Delay+0x1c>
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	20000050 	.word	0x20000050
 8002794:	10624dd3 	.word	0x10624dd3

08002798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e041      	b.n	800282e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe ffbc 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f000 fa56 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d001      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e035      	b.n	80028bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_TIM_Base_Start_IT+0x90>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_TIM_Base_Start_IT+0x4e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287a:	d004      	beq.n	8002886 <HAL_TIM_Base_Start_IT+0x4e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_TIM_Base_Start_IT+0x94>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d111      	bne.n	80028aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b06      	cmp	r3, #6
 8002896:	d010      	beq.n	80028ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a8:	e007      	b.n	80028ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000400 	.word	0x40000400

080028d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d020      	beq.n	8002934 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0202 	mvn.w	r2, #2
 8002904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f998 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f98b 	bl	8002c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f99a 	bl	8002c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d020      	beq.n	8002980 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0204 	mvn.w	r2, #4
 8002950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f972 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f965 	bl	8002c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f974 	bl	8002c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d020      	beq.n	80029cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0208 	mvn.w	r2, #8
 800299c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2204      	movs	r2, #4
 80029a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f94c 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 80029b8:	e005      	b.n	80029c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f93f 	bl	8002c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f94e 	bl	8002c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d020      	beq.n	8002a18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0210 	mvn.w	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2208      	movs	r2, #8
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f926 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f919 	bl	8002c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f928 	bl	8002c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00c      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0201 	mvn.w	r2, #1
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fc0e 	bl	8001258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa6f 	bl	8002f3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8f8 	bl	8002c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0220 	mvn.w	r2, #32
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa42 	bl	8002f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_TIM_ConfigClockSource+0x1c>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e0b4      	b.n	8002c36 <HAL_TIM_ConfigClockSource+0x186>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b04:	d03e      	beq.n	8002b84 <HAL_TIM_ConfigClockSource+0xd4>
 8002b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0a:	f200 8087 	bhi.w	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b12:	f000 8086 	beq.w	8002c22 <HAL_TIM_ConfigClockSource+0x172>
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1a:	d87f      	bhi.n	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b1c:	2b70      	cmp	r3, #112	; 0x70
 8002b1e:	d01a      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0xa6>
 8002b20:	2b70      	cmp	r3, #112	; 0x70
 8002b22:	d87b      	bhi.n	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b24:	2b60      	cmp	r3, #96	; 0x60
 8002b26:	d050      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x11a>
 8002b28:	2b60      	cmp	r3, #96	; 0x60
 8002b2a:	d877      	bhi.n	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	2b50      	cmp	r3, #80	; 0x50
 8002b2e:	d03c      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0xfa>
 8002b30:	2b50      	cmp	r3, #80	; 0x50
 8002b32:	d873      	bhi.n	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d058      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x13a>
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d86f      	bhi.n	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b3c:	2b30      	cmp	r3, #48	; 0x30
 8002b3e:	d064      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0x15a>
 8002b40:	2b30      	cmp	r3, #48	; 0x30
 8002b42:	d86b      	bhi.n	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d060      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d867      	bhi.n	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d05c      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0x15a>
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d05a      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0x15a>
 8002b54:	e062      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f000 f96a 	bl	8002e3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	609a      	str	r2, [r3, #8]
      break;
 8002b82:	e04f      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6899      	ldr	r1, [r3, #8]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f000 f953 	bl	8002e3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba6:	609a      	str	r2, [r3, #8]
      break;
 8002ba8:	e03c      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6859      	ldr	r1, [r3, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f000 f8ca 	bl	8002d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2150      	movs	r1, #80	; 0x50
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f921 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002bc8:	e02c      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f000 f8e8 	bl	8002dac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2160      	movs	r1, #96	; 0x60
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f911 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002be8:	e01c      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f000 f8aa 	bl	8002d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f901 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002c08:	e00c      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f000 f8f8 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002c1a:	e003      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c20:	e000      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
	...

08002c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a2b      	ldr	r2, [pc, #172]	; (8002d48 <TIM_Base_SetConfig+0xc0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d007      	beq.n	8002cb0 <TIM_Base_SetConfig+0x28>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d003      	beq.n	8002cb0 <TIM_Base_SetConfig+0x28>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <TIM_Base_SetConfig+0xc4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d108      	bne.n	8002cc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <TIM_Base_SetConfig+0xc0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <TIM_Base_SetConfig+0x52>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d003      	beq.n	8002cda <TIM_Base_SetConfig+0x52>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <TIM_Base_SetConfig+0xc4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d108      	bne.n	8002cec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <TIM_Base_SetConfig+0xc0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d103      	bne.n	8002d20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f023 0201 	bic.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	611a      	str	r2, [r3, #16]
  }
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400

08002d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f023 0201 	bic.w	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 030a 	bic.w	r3, r3, #10
 8002d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0210 	bic.w	r2, r3, #16
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	031b      	lsls	r3, r3, #12
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	621a      	str	r2, [r3, #32]
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f043 0307 	orr.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	021a      	lsls	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	609a      	str	r2, [r3, #8]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e041      	b.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d004      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d10c      	bne.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40000400 	.word	0x40000400

08002f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <__libc_init_array>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2600      	movs	r6, #0
 8002f54:	4d0c      	ldr	r5, [pc, #48]	; (8002f88 <__libc_init_array+0x38>)
 8002f56:	4c0d      	ldr	r4, [pc, #52]	; (8002f8c <__libc_init_array+0x3c>)
 8002f58:	1b64      	subs	r4, r4, r5
 8002f5a:	10a4      	asrs	r4, r4, #2
 8002f5c:	42a6      	cmp	r6, r4
 8002f5e:	d109      	bne.n	8002f74 <__libc_init_array+0x24>
 8002f60:	f000 f822 	bl	8002fa8 <_init>
 8002f64:	2600      	movs	r6, #0
 8002f66:	4d0a      	ldr	r5, [pc, #40]	; (8002f90 <__libc_init_array+0x40>)
 8002f68:	4c0a      	ldr	r4, [pc, #40]	; (8002f94 <__libc_init_array+0x44>)
 8002f6a:	1b64      	subs	r4, r4, r5
 8002f6c:	10a4      	asrs	r4, r4, #2
 8002f6e:	42a6      	cmp	r6, r4
 8002f70:	d105      	bne.n	8002f7e <__libc_init_array+0x2e>
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f78:	4798      	blx	r3
 8002f7a:	3601      	adds	r6, #1
 8002f7c:	e7ee      	b.n	8002f5c <__libc_init_array+0xc>
 8002f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f82:	4798      	blx	r3
 8002f84:	3601      	adds	r6, #1
 8002f86:	e7f2      	b.n	8002f6e <__libc_init_array+0x1e>
 8002f88:	08002fe4 	.word	0x08002fe4
 8002f8c:	08002fe4 	.word	0x08002fe4
 8002f90:	08002fe4 	.word	0x08002fe4
 8002f94:	08002fe8 	.word	0x08002fe8

08002f98 <memset>:
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4402      	add	r2, r0
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <memset+0xa>
 8002fa0:	4770      	bx	lr
 8002fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa6:	e7f9      	b.n	8002f9c <memset+0x4>

08002fa8 <_init>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	bf00      	nop
 8002fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fae:	bc08      	pop	{r3}
 8002fb0:	469e      	mov	lr, r3
 8002fb2:	4770      	bx	lr

08002fb4 <_fini>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr
